2022-07-08 10:57:39 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table [*]user (id bigint not null, email varchar(255), points integer, role integer, primary key (id))"; ожидалось "identifier"
Syntax error in SQL statement "create table [*]user (id bigint not null, email varchar(255), points integer, role integer, primary key (id))"; expected "identifier"; SQL statement:
create table user (id bigint not null, email varchar(255), points integer, role integer, primary key (id)) [42001-214]
2022-07-08 10:57:39 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references [*]user"; ожидалось "identifier"
Syntax error in SQL statement "alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references [*]user"; expected "identifier"; SQL statement:
alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references user [42001-214]
2022-07-08 11:01:02 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table [*]user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id))"; ожидалось "identifier"
Syntax error in SQL statement "create table [*]user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id))"; expected "identifier"; SQL statement:
create table user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id)) [42001-214]
2022-07-08 11:01:02 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references [*]user"; ожидалось "identifier"
Syntax error in SQL statement "alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references [*]user"; expected "identifier"; SQL statement:
alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references user [42001-214]
2022-07-08 11:07:17 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table [*]user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id))"; ожидалось "identifier"
Syntax error in SQL statement "create table [*]user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id))"; expected "identifier"; SQL statement:
create table user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id)) [42001-214]
2022-07-08 11:07:17 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references [*]user"; ожидалось "identifier"
Syntax error in SQL statement "alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references [*]user"; expected "identifier"; SQL statement:
alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references user [42001-214]
2022-07-08 11:16:02 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table [*]user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id))"; ожидалось "identifier"
Syntax error in SQL statement "create table [*]user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id))"; expected "identifier"; SQL statement:
create table user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id)) [42001-214]
2022-07-08 11:16:02 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references [*]user"; ожидалось "identifier"
Syntax error in SQL statement "alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references [*]user"; expected "identifier"; SQL statement:
alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references user [42001-214]
2022-07-08 11:16:49 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table [*]user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id))"; ожидалось "identifier"
Syntax error in SQL statement "create table [*]user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id))"; expected "identifier"; SQL statement:
create table user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id)) [42001-214]
2022-07-08 11:16:49 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references [*]user"; ожидалось "identifier"
Syntax error in SQL statement "alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references [*]user"; expected "identifier"; SQL statement:
alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references user [42001-214]
2022-07-08 11:23:47 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "drop table if exists [*]user CASCADE "; ожидалось "identifier"
Syntax error in SQL statement "drop table if exists [*]user CASCADE "; expected "identifier"; SQL statement:
drop table if exists user CASCADE  [42001-214]
2022-07-08 11:23:47 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table [*]user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id))"; ожидалось "identifier"
Syntax error in SQL statement "create table [*]user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id))"; expected "identifier"; SQL statement:
create table user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id)) [42001-214]
2022-07-08 11:23:47 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references [*]user"; ожидалось "identifier"
Syntax error in SQL statement "alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references [*]user"; expected "identifier"; SQL statement:
alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references user [42001-214]
2022-07-08 11:24:09 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "drop table if exists [*]user CASCADE "; ожидалось "identifier"
Syntax error in SQL statement "drop table if exists [*]user CASCADE "; expected "identifier"; SQL statement:
drop table if exists user CASCADE  [42001-214]
2022-07-08 11:24:09 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table [*]user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id))"; ожидалось "identifier"
Syntax error in SQL statement "create table [*]user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id))"; expected "identifier"; SQL statement:
create table user (id bigint not null, created_date bigint not null, email varchar(255), points integer, role integer, primary key (id)) [42001-214]
2022-07-08 11:24:09 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references [*]user"; ожидалось "identifier"
Syntax error in SQL statement "alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references [*]user"; expected "identifier"; SQL statement:
alter table user_questionnaires add constraint FKis1ved2p0j52madfu19pwbhy1 foreign key (user_id) references user [42001-214]
2022-07-08 11:25:33 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "drop table if exists [*]user CASCADE "; ожидалось "identifier"
Syntax error in SQL statement "drop table if exists [*]user CASCADE "; expected "identifier"; SQL statement:
drop table if exists user CASCADE  [42001-214]
2022-07-09 10:07:21 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy105.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 10:07:21 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy105.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 10:07:21 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:267)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy105.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:54:19 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$1.doPrepare(StatementPreparerImpl.java:90)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareStatement(StatementPreparerImpl.java:75)
	at org.hibernate.id.enhanced.SequenceStructure$1.getNextValue(SequenceStructure.java:105)
	at org.hibernate.id.enhanced.NoopOptimizer.generate(NoopOptimizer.java:40)
	at org.hibernate.id.enhanced.SequenceStyleGenerator.generate(SequenceStyleGenerator.java:534)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:115)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:756)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:742)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:666)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:54:19 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.rollback(ProxyConnection.java:396)
	at com.zaxxer.hikari.pool.HikariProxyConnection.rollback(HikariProxyConnection.java)
	at org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor.rollback(AbstractLogicalConnectionImplementor.java:121)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.rollback(JdbcResourceLocalTransactionCoordinatorImpl.java:304)
	at org.hibernate.engine.transaction.internal.TransactionImpl.rollback(TransactionImpl.java:142)
	at org.springframework.orm.jpa.JpaTransactionManager.doRollback(JpaTransactionManager.java:589)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:835)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:809)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.completeTransactionAfterThrowing(TransactionAspectSupport.java:672)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:54:19 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:54:19 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:54:19 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.setAutoCommit(JdbcConnection.java:402)
	at com.zaxxer.hikari.pool.PoolBase.resetConnectionState(PoolBase.java:219)
	at com.zaxxer.hikari.pool.PoolEntry.resetConnectionState(PoolEntry.java:107)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:263)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:54:51 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$1.doPrepare(StatementPreparerImpl.java:90)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareStatement(StatementPreparerImpl.java:81)
	at org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.buildBatchStatement(AbstractBatchImpl.java:142)
	at org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.getBatchStatement(AbstractBatchImpl.java:131)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3356)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)
	at org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3290)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2425)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:54:51 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.rollback(ProxyConnection.java:396)
	at com.zaxxer.hikari.pool.HikariProxyConnection.rollback(HikariProxyConnection.java)
	at org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor.rollback(AbstractLogicalConnectionImplementor.java:121)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.rollback(JdbcResourceLocalTransactionCoordinatorImpl.java:304)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:290)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:54:51 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:54:51 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:54:51 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:257)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:57:03 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$1.doPrepare(StatementPreparerImpl.java:90)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareStatement(StatementPreparerImpl.java:81)
	at org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.buildBatchStatement(AbstractBatchImpl.java:142)
	at org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.getBatchStatement(AbstractBatchImpl.java:131)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3356)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)
	at org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3290)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2425)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:57:03 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.rollback(ProxyConnection.java:396)
	at com.zaxxer.hikari.pool.HikariProxyConnection.rollback(HikariProxyConnection.java)
	at org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor.rollback(AbstractLogicalConnectionImplementor.java:121)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.rollback(JdbcResourceLocalTransactionCoordinatorImpl.java:304)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:290)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:57:03 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:57:03 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:57:03 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:257)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:58:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$1.doPrepare(StatementPreparerImpl.java:90)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareStatement(StatementPreparerImpl.java:75)
	at org.hibernate.id.enhanced.SequenceStructure$1.getNextValue(SequenceStructure.java:105)
	at org.hibernate.id.enhanced.NoopOptimizer.generate(NoopOptimizer.java:40)
	at org.hibernate.id.enhanced.SequenceStyleGenerator.generate(SequenceStyleGenerator.java:534)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:115)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:756)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:742)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:666)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:58:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.rollback(ProxyConnection.java:396)
	at com.zaxxer.hikari.pool.HikariProxyConnection.rollback(HikariProxyConnection.java)
	at org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor.rollback(AbstractLogicalConnectionImplementor.java:121)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.rollback(JdbcResourceLocalTransactionCoordinatorImpl.java:304)
	at org.hibernate.engine.transaction.internal.TransactionImpl.rollback(TransactionImpl.java:142)
	at org.springframework.orm.jpa.JpaTransactionManager.doRollback(JpaTransactionManager.java:589)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:835)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:809)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.completeTransactionAfterThrowing(TransactionAspectSupport.java:672)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:58:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:58:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:58:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.setAutoCommit(JdbcConnection.java:402)
	at com.zaxxer.hikari.pool.PoolBase.resetConnectionState(PoolBase.java:219)
	at com.zaxxer.hikari.pool.PoolEntry.resetConnectionState(PoolEntry.java:107)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:263)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:59:25 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$1.doPrepare(StatementPreparerImpl.java:90)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareStatement(StatementPreparerImpl.java:75)
	at org.hibernate.id.enhanced.SequenceStructure$1.getNextValue(SequenceStructure.java:105)
	at org.hibernate.id.enhanced.NoopOptimizer.generate(NoopOptimizer.java:40)
	at org.hibernate.id.enhanced.SequenceStyleGenerator.generate(SequenceStyleGenerator.java:534)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:115)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:756)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:742)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:666)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:59:25 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.rollback(ProxyConnection.java:396)
	at com.zaxxer.hikari.pool.HikariProxyConnection.rollback(HikariProxyConnection.java)
	at org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor.rollback(AbstractLogicalConnectionImplementor.java:121)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.rollback(JdbcResourceLocalTransactionCoordinatorImpl.java:304)
	at org.hibernate.engine.transaction.internal.TransactionImpl.rollback(TransactionImpl.java:142)
	at org.springframework.orm.jpa.JpaTransactionManager.doRollback(JpaTransactionManager.java:589)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:835)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:809)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.completeTransactionAfterThrowing(TransactionAspectSupport.java:672)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:59:25 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:59:25 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 11:59:25 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.setAutoCommit(JdbcConnection.java:402)
	at com.zaxxer.hikari.pool.PoolBase.resetConnectionState(PoolBase.java:219)
	at com.zaxxer.hikari.pool.PoolEntry.resetConnectionState(PoolEntry.java:107)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:263)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:03:10 jdbc[4]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных открыта в эксклюзивном режиме, открыть дополнительные соединения невозможно
The database is open in exclusive mode; can not open additional connections [90135-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.engine.SessionLocal.checkSuspended(SessionLocal.java:1240)
	at org.h2.engine.SessionLocal.transitionToState(SessionLocal.java:1232)
	at org.h2.engine.SessionLocal.setCurrentCommand(SessionLocal.java:1210)
	at org.h2.engine.SessionLocal.endStatement(SessionLocal.java:1693)
	at org.h2.command.Command.executeQuery(Command.java:227)
	at org.h2.jdbc.JdbcConnection.getQueryTimeout(JdbcConnection.java:703)
	at org.h2.jdbc.JdbcStatement.getQueryTimeout(JdbcStatement.java:711)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.getQueryTimeout(HikariProxyPreparedStatement.java)
	at org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.close(ResourceRegistryStandardImpl.java:189)
	at org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.release(ResourceRegistryStandardImpl.java:109)
	at org.hibernate.id.enhanced.SequenceStructure$1.getNextValue(SequenceStructure.java:127)
	at org.hibernate.id.enhanced.NoopOptimizer.generate(NoopOptimizer.java:40)
	at org.hibernate.id.enhanced.SequenceStyleGenerator.generate(SequenceStyleGenerator.java:534)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:115)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:756)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:742)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:666)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:03:10 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных открыта в эксклюзивном режиме, открыть дополнительные соединения невозможно
The database is open in exclusive mode; can not open additional connections [90135-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.engine.SessionLocal.checkSuspended(SessionLocal.java:1240)
	at org.h2.engine.SessionLocal.transitionToState(SessionLocal.java:1232)
	at org.h2.engine.SessionLocal.setCurrentCommand(SessionLocal.java:1210)
	at org.h2.engine.SessionLocal.endStatement(SessionLocal.java:1693)
	at org.h2.command.Command.executeQuery(Command.java:227)
	at org.h2.jdbc.JdbcConnection.getQueryTimeout(JdbcConnection.java:703)
	at org.h2.jdbc.JdbcStatement.getQueryTimeout(JdbcStatement.java:711)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.getQueryTimeout(HikariProxyPreparedStatement.java)
	at org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.close(ResourceRegistryStandardImpl.java:189)
	at org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.release(ResourceRegistryStandardImpl.java:109)
	at org.hibernate.id.enhanced.SequenceStructure$1.getNextValue(SequenceStructure.java:127)
	at org.hibernate.id.enhanced.NoopOptimizer.generate(NoopOptimizer.java:40)
	at org.hibernate.id.enhanced.SequenceStyleGenerator.generate(SequenceStyleGenerator.java:534)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:115)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:756)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:742)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:666)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:03:10 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных открыта в эксклюзивном режиме, открыть дополнительные соединения невозможно
The database is open in exclusive mode; can not open additional connections [90135-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.engine.SessionLocal.checkSuspended(SessionLocal.java:1240)
	at org.h2.engine.SessionLocal.transitionToState(SessionLocal.java:1232)
	at org.h2.engine.SessionLocal.setCurrentCommand(SessionLocal.java:1210)
	at org.h2.engine.SessionLocal.endStatement(SessionLocal.java:1693)
	at org.h2.command.Command.executeQuery(Command.java:227)
	at org.h2.jdbc.JdbcConnection.getQueryTimeout(JdbcConnection.java:703)
	at org.h2.jdbc.JdbcStatement.getQueryTimeout(JdbcStatement.java:711)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.getQueryTimeout(HikariProxyPreparedStatement.java)
	at org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.close(ResourceRegistryStandardImpl.java:189)
	at org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.release(ResourceRegistryStandardImpl.java:109)
	at org.hibernate.id.enhanced.SequenceStructure$1.getNextValue(SequenceStructure.java:127)
	at org.hibernate.id.enhanced.NoopOptimizer.generate(NoopOptimizer.java:40)
	at org.hibernate.id.enhanced.SequenceStyleGenerator.generate(SequenceStyleGenerator.java:534)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:115)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:756)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:742)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:666)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:03:10 jdbc[4]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных открыта в эксклюзивном режиме, открыть дополнительные соединения невозможно
The database is open in exclusive mode; can not open additional connections [90135-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.engine.SessionLocal.checkSuspended(SessionLocal.java:1240)
	at org.h2.engine.SessionLocal.transitionToState(SessionLocal.java:1232)
	at org.h2.engine.SessionLocal.setCurrentCommand(SessionLocal.java:1210)
	at org.h2.engine.SessionLocal.endStatement(SessionLocal.java:1693)
	at org.h2.command.Command.executeQuery(Command.java:227)
	at org.h2.jdbc.JdbcConnection.getQueryTimeout(JdbcConnection.java:703)
	at org.h2.jdbc.JdbcStatement.getQueryTimeout(JdbcStatement.java:711)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.getQueryTimeout(HikariProxyPreparedStatement.java)
	at org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.close(ResourceRegistryStandardImpl.java:189)
	at org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.release(ResourceRegistryStandardImpl.java:109)
	at org.hibernate.id.enhanced.SequenceStructure$1.getNextValue(SequenceStructure.java:127)
	at org.hibernate.id.enhanced.NoopOptimizer.generate(NoopOptimizer.java:40)
	at org.hibernate.id.enhanced.SequenceStyleGenerator.generate(SequenceStyleGenerator.java:534)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:115)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:756)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:742)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:666)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:03:10 jdbc[4]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$1.doPrepare(StatementPreparerImpl.java:90)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareStatement(StatementPreparerImpl.java:81)
	at org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.buildBatchStatement(AbstractBatchImpl.java:142)
	at org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.getBatchStatement(AbstractBatchImpl.java:131)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3356)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)
	at org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3290)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2425)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:03:10 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$1.doPrepare(StatementPreparerImpl.java:90)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareStatement(StatementPreparerImpl.java:81)
	at org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.buildBatchStatement(AbstractBatchImpl.java:142)
	at org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.getBatchStatement(AbstractBatchImpl.java:131)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3356)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)
	at org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3290)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2425)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:03:10 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.rollback(ProxyConnection.java:396)
	at com.zaxxer.hikari.pool.HikariProxyConnection.rollback(HikariProxyConnection.java)
	at org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor.rollback(AbstractLogicalConnectionImplementor.java:121)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.rollback(JdbcResourceLocalTransactionCoordinatorImpl.java:304)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:290)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:03:10 jdbc[4]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.rollback(ProxyConnection.java:396)
	at com.zaxxer.hikari.pool.HikariProxyConnection.rollback(HikariProxyConnection.java)
	at org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor.rollback(AbstractLogicalConnectionImplementor.java:121)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.rollback(JdbcResourceLocalTransactionCoordinatorImpl.java:304)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:290)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:03:10 jdbc[4]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:03:10 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:03:10 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:03:10 jdbc[4]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:03:10 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:257)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:03:10 jdbc[4]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:257)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:05:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcStatement.checkClosed(JdbcStatement.java:1273)
	at org.h2.jdbc.JdbcResultSet.checkClosed(JdbcResultSet.java:3539)
	at org.h2.jdbc.JdbcResultSet.checkColumnIndex(JdbcResultSet.java:3522)
	at org.h2.jdbc.JdbcResultSet.getLong(JdbcResultSet.java:727)
	at com.zaxxer.hikari.pool.HikariProxyResultSet.getLong(HikariProxyResultSet.java)
	at org.hibernate.id.IdentifierGeneratorHelper$BasicHolder.initialize(IdentifierGeneratorHelper.java:300)
	at org.hibernate.id.enhanced.SequenceStructure$1.getNextValue(SequenceStructure.java:111)
	at org.hibernate.id.enhanced.NoopOptimizer.generate(NoopOptimizer.java:40)
	at org.hibernate.id.enhanced.SequenceStyleGenerator.generate(SequenceStyleGenerator.java:534)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:115)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:756)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:742)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:666)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:05:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcStatement.checkClosed(JdbcStatement.java:1273)
	at org.h2.jdbc.JdbcStatement.getMaxRows(JdbcStatement.java:460)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.getMaxRows(HikariProxyPreparedStatement.java)
	at org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.close(ResourceRegistryStandardImpl.java:186)
	at org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.release(ResourceRegistryStandardImpl.java:109)
	at org.hibernate.id.enhanced.SequenceStructure$1.getNextValue(SequenceStructure.java:127)
	at org.hibernate.id.enhanced.NoopOptimizer.generate(NoopOptimizer.java:40)
	at org.hibernate.id.enhanced.SequenceStyleGenerator.generate(SequenceStyleGenerator.java:534)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:115)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:756)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:742)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:666)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:05:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.rollback(ProxyConnection.java:396)
	at com.zaxxer.hikari.pool.HikariProxyConnection.rollback(HikariProxyConnection.java)
	at org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor.rollback(AbstractLogicalConnectionImplementor.java:121)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.rollback(JdbcResourceLocalTransactionCoordinatorImpl.java:304)
	at org.hibernate.engine.transaction.internal.TransactionImpl.rollback(TransactionImpl.java:142)
	at org.springframework.orm.jpa.JpaTransactionManager.doRollback(JpaTransactionManager.java:589)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:835)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:809)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.completeTransactionAfterThrowing(TransactionAspectSupport.java:672)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:05:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:05:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:05:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:257)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:05:52 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$1.doPrepare(StatementPreparerImpl.java:90)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareStatement(StatementPreparerImpl.java:75)
	at org.hibernate.id.enhanced.SequenceStructure$1.getNextValue(SequenceStructure.java:105)
	at org.hibernate.id.enhanced.NoopOptimizer.generate(NoopOptimizer.java:40)
	at org.hibernate.id.enhanced.SequenceStyleGenerator.generate(SequenceStyleGenerator.java:534)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:115)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:756)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:742)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:666)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:05:52 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.rollback(ProxyConnection.java:396)
	at com.zaxxer.hikari.pool.HikariProxyConnection.rollback(HikariProxyConnection.java)
	at org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor.rollback(AbstractLogicalConnectionImplementor.java:121)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.rollback(JdbcResourceLocalTransactionCoordinatorImpl.java:304)
	at org.hibernate.engine.transaction.internal.TransactionImpl.rollback(TransactionImpl.java:142)
	at org.springframework.orm.jpa.JpaTransactionManager.doRollback(JpaTransactionManager.java:589)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:835)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:809)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.completeTransactionAfterThrowing(TransactionAspectSupport.java:672)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:05:52 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:05:52 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-09 12:05:52 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.setAutoCommit(JdbcConnection.java:402)
	at com.zaxxer.hikari.pool.PoolBase.resetConnectionState(PoolBase.java:219)
	at com.zaxxer.hikari.pool.PoolEntry.resetConnectionState(PoolEntry.java:107)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:263)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 11:08:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcStatement.checkClosed(JdbcStatement.java:1273)
	at org.h2.jdbc.JdbcResultSet.checkClosed(JdbcResultSet.java:3539)
	at org.h2.jdbc.JdbcResultSet.checkColumnIndex(JdbcResultSet.java:3522)
	at org.h2.jdbc.JdbcResultSet.getLong(JdbcResultSet.java:727)
	at com.zaxxer.hikari.pool.HikariProxyResultSet.getLong(HikariProxyResultSet.java)
	at org.hibernate.id.IdentifierGeneratorHelper$BasicHolder.initialize(IdentifierGeneratorHelper.java:300)
	at org.hibernate.id.enhanced.SequenceStructure$1.getNextValue(SequenceStructure.java:111)
	at org.hibernate.id.enhanced.NoopOptimizer.generate(NoopOptimizer.java:40)
	at org.hibernate.id.enhanced.SequenceStyleGenerator.generate(SequenceStyleGenerator.java:534)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:115)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:756)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:742)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:666)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 11:08:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcStatement.checkClosed(JdbcStatement.java:1273)
	at org.h2.jdbc.JdbcStatement.getMaxRows(JdbcStatement.java:460)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.getMaxRows(HikariProxyPreparedStatement.java)
	at org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.close(ResourceRegistryStandardImpl.java:186)
	at org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.release(ResourceRegistryStandardImpl.java:109)
	at org.hibernate.id.enhanced.SequenceStructure$1.getNextValue(SequenceStructure.java:127)
	at org.hibernate.id.enhanced.NoopOptimizer.generate(NoopOptimizer.java:40)
	at org.hibernate.id.enhanced.SequenceStyleGenerator.generate(SequenceStyleGenerator.java:534)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:115)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:756)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:742)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:666)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 11:08:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.rollback(ProxyConnection.java:396)
	at com.zaxxer.hikari.pool.HikariProxyConnection.rollback(HikariProxyConnection.java)
	at org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor.rollback(AbstractLogicalConnectionImplementor.java:121)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.rollback(JdbcResourceLocalTransactionCoordinatorImpl.java:304)
	at org.hibernate.engine.transaction.internal.TransactionImpl.rollback(TransactionImpl.java:142)
	at org.springframework.orm.jpa.JpaTransactionManager.doRollback(JpaTransactionManager.java:589)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:835)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:809)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.completeTransactionAfterThrowing(TransactionAspectSupport.java:672)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 11:08:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 11:08:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 11:08:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:257)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 11:08:56 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$1.doPrepare(StatementPreparerImpl.java:90)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareStatement(StatementPreparerImpl.java:75)
	at org.hibernate.id.enhanced.SequenceStructure$1.getNextValue(SequenceStructure.java:105)
	at org.hibernate.id.enhanced.NoopOptimizer.generate(NoopOptimizer.java:40)
	at org.hibernate.id.enhanced.SequenceStyleGenerator.generate(SequenceStyleGenerator.java:534)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:115)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:756)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:742)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:666)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.service.CustomerService.addQuestionnaire(CustomerService.java:26)
	at com.example.questionnaire.controller.CustomerController.addQuestionnaire(CustomerController.java:36)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 11:08:56 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.rollback(ProxyConnection.java:396)
	at com.zaxxer.hikari.pool.HikariProxyConnection.rollback(HikariProxyConnection.java)
	at org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor.rollback(AbstractLogicalConnectionImplementor.java:121)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.rollback(JdbcResourceLocalTransactionCoordinatorImpl.java:304)
	at org.hibernate.engine.transaction.internal.TransactionImpl.rollback(TransactionImpl.java:142)
	at org.springframework.orm.jpa.JpaTransactionManager.doRollback(JpaTransactionManager.java:589)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:835)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:809)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.completeTransactionAfterThrowing(TransactionAspectSupport.java:672)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.service.CustomerService.addQuestionnaire(CustomerService.java:26)
	at com.example.questionnaire.controller.CustomerController.addQuestionnaire(CustomerController.java:36)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 11:08:56 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 11:08:56 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 11:08:56 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.setAutoCommit(JdbcConnection.java:402)
	at com.zaxxer.hikari.pool.PoolBase.resetConnectionState(PoolBase.java:219)
	at com.zaxxer.hikari.pool.PoolEntry.resetConnectionState(PoolEntry.java:107)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:263)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 11:24:49 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$1.doPrepare(StatementPreparerImpl.java:90)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareStatement(StatementPreparerImpl.java:81)
	at org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.buildBatchStatement(AbstractBatchImpl.java:142)
	at org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.getBatchStatement(AbstractBatchImpl.java:131)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3356)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)
	at org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3290)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2425)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy117.save(Unknown Source)
	at com.example.questionnaire.service.QuestionnaireService.addQuestion(QuestionnaireService.java:29)
	at com.example.questionnaire.controller.QuestionnaireController.addQuestion(QuestionnaireController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 11:24:49 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.rollback(ProxyConnection.java:396)
	at com.zaxxer.hikari.pool.HikariProxyConnection.rollback(HikariProxyConnection.java)
	at org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor.rollback(AbstractLogicalConnectionImplementor.java:121)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.rollback(JdbcResourceLocalTransactionCoordinatorImpl.java:304)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:290)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy117.save(Unknown Source)
	at com.example.questionnaire.service.QuestionnaireService.addQuestion(QuestionnaireService.java:29)
	at com.example.questionnaire.controller.QuestionnaireController.addQuestion(QuestionnaireController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 11:24:49 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at jdk.internal.reflect.GeneratedMethodAccessor59.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 11:24:49 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at jdk.internal.reflect.GeneratedMethodAccessor59.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 11:24:49 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:257)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at jdk.internal.reflect.GeneratedMethodAccessor59.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 13:43:02 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1163)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1084)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 13:43:02 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1163)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1084)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 13:43:02 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:267)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1163)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1084)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 13:50:31 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$1.doPrepare(StatementPreparerImpl.java:90)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareStatement(StatementPreparerImpl.java:75)
	at org.hibernate.id.enhanced.SequenceStructure$1.getNextValue(SequenceStructure.java:105)
	at org.hibernate.id.enhanced.NoopOptimizer.generate(NoopOptimizer.java:40)
	at org.hibernate.id.enhanced.SequenceStyleGenerator.generate(SequenceStyleGenerator.java:534)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:115)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:756)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:742)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy2/jdk.proxy2.$Proxy108.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:666)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 13:50:31 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.rollback(ProxyConnection.java:396)
	at com.zaxxer.hikari.pool.HikariProxyConnection.rollback(HikariProxyConnection.java)
	at org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor.rollback(AbstractLogicalConnectionImplementor.java:121)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.rollback(JdbcResourceLocalTransactionCoordinatorImpl.java:304)
	at org.hibernate.engine.transaction.internal.TransactionImpl.rollback(TransactionImpl.java:142)
	at org.springframework.orm.jpa.JpaTransactionManager.doRollback(JpaTransactionManager.java:589)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:835)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:809)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.completeTransactionAfterThrowing(TransactionAspectSupport.java:672)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy112.save(Unknown Source)
	at com.example.questionnaire.service.CustomerService.saveCustomer(CustomerService.java:21)
	at com.example.questionnaire.controller.CustomerController.addCustomer(CustomerController.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 13:50:31 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 13:50:31 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 13:50:31 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.setAutoCommit(JdbcConnection.java:402)
	at com.zaxxer.hikari.pool.PoolBase.resetConnectionState(PoolBase.java:219)
	at com.zaxxer.hikari.pool.PoolEntry.resetConnectionState(PoolEntry.java:107)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:263)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 14:24:17 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 14:24:17 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 14:24:17 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:267)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 17:56:27 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 17:56:28 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-12 17:56:28 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:267)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-18 10:33:22 database: wrong user or password; user: "SA"
org.h2.message.DbException: Неверное имя пользователя или пароль
Wrong user name or password [28000-214]
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.engine.Engine.openSession(Engine.java:154)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:338)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:122)
	at org.h2.util.JdbcUtils.getConnection(JdbcUtils.java:288)
	at org.h2.server.web.WebServer.getConnection(WebServer.java:808)
	at org.h2.server.web.WebApp.login(WebApp.java:1033)
	at org.h2.server.web.WebApp.process(WebApp.java:226)
	at org.h2.server.web.WebApp.processRequest(WebApp.java:176)
	at org.h2.server.web.WebServlet.doGet(WebServlet.java:129)
	at org.h2.server.web.WebServlet.doPost(WebServlet.java:166)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException: Неверное имя пользователя или пароль
Wrong user name or password [28000-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:510)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	... 50 more
2022-07-18 10:40:47 jdbc[16]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "[*]\\INFORMATION_SCHEMA.LOCKS"
Syntax error in SQL statement "[*]\\INFORMATION_SCHEMA.LOCKS"; SQL statement:
\INFORMATION_SCHEMA.LOCKS [42000-214]
2022-07-18 10:47:00 jdbc[17]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2022-07-18 10:47:00 jdbc[17]: 
/**/Connection conn14 = DriverManager.getConnection("jdbc:h2:file:./database;TRACE_LEVEL_FILE=3;TRACE_LEVEL_SYSTEM_OUT=3", "DEN", "");
2022-07-18 10:47:00 jdbc[17]: 
/**/conn14.close();
2022-07-18 10:47:00 lock: 17 shared read unlock SYS 
2022-07-18 10:47:00 database: disconnecting session #17
2022-07-18 10:47:00 database: disconnected session #17
2022-07-18 10:47:03 database: connecting session #18 to C:/Users/User/IdeaProjects/Questionnaire/database
2022-07-18 10:47:03 jdbc[18]: 
/*SQL */SET TRACE_LEVEL_SYSTEM_OUT 3;
2022-07-18 10:47:03 jdbc[18]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2022-07-18 10:47:03 jdbc[18]: 
/**/Connection conn15 = DriverManager.getConnection("jdbc:h2:file:./database;TRACE_LEVEL_FILE=3;TRACE_LEVEL_SYSTEM_OUT=3", "DEN", "");
2022-07-18 10:47:03 jdbc[18]: 
/**/DatabaseMetaData dbMeta21 = conn15.getMetaData();
2022-07-18 10:47:03 jdbc[18]: 
/**/DatabaseMetaData dbMeta22 = conn15.getMetaData();
2022-07-18 10:47:03 jdbc[18]: 
/**/dbMeta22.storesLowerCaseIdentifiers();
2022-07-18 10:47:03 jdbc[18]: 
/**/dbMeta22.getSchemas();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs183.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs183.getString("TABLE_SCHEM");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs183.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs183.getString("TABLE_SCHEM");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs183.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs183.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/dbMeta22.getTables(null, "INFORMATION_SCHEMA", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs184.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/dbMeta22.getConnection();
2022-07-18 10:47:03 jdbc[18]: 
/**/PreparedStatement prep19 = conn15.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2");
2022-07-18 10:47:03 jdbc[18]: Plan       : calculate cost for plan [COLUMNS:-4:org.h2.table.InformationSchemaTable@1f7c411c]
2022-07-18 10:47:03 jdbc[18]: Plan       :   for table filter COLUMNS:-4:org.h2.table.InformationSchemaTable@1f7c411c
2022-07-18 10:47:03 jdbc[18]: Table      :     potential plan item cost 10 000 index meta
2022-07-18 10:47:03 jdbc[18]: Table      :     potential plan item cost 28 index meta
2022-07-18 10:47:03 jdbc[18]: Plan       :   best plan item cost 27,44 index meta
2022-07-18 10:47:03 jdbc[18]: Plan       : plan cost 28,44
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "CONSTANTS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs185 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:27*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'CONSTANTS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs185.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "ENUM_VALUES");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs186 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ENUM_VALUES'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs186.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "INDEXES");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs187 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:10*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'INDEXES'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs187.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "INDEX_COLUMNS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs188 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:11*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'INDEX_COLUMNS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs188.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "INFORMATION_SCHEMA_CATALOG_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs189 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'INFORMATION_SCHEMA_CATALOG_NAME'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs189.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs189.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs189.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs189.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs189.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs189.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "IN_DOUBT");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs190 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'IN_DOUBT'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs190.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs190.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs190.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs190.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs190.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs190.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs190.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs190.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs190.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs190.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "LOCKS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs191 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'LOCKS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs191.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "QUERY_STATISTICS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs192 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'QUERY_STATISTICS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs192.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "RIGHTS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs193 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:6*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'RIGHTS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs193.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "ROLES");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs194 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ROLES'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs194.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs194.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs194.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs194.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs194.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs194.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs194.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs194.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs194.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs194.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "SESSIONS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs195 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:13*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SESSIONS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs195.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "SESSION_STATE");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs196 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SESSION_STATE'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs196.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs196.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs196.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs196.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs196.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs196.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs196.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs196.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs196.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs196.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "SETTINGS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs197 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SETTINGS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs197.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs197.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs197.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs197.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs197.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs197.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs197.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs197.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs197.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs197.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "SYNONYMS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs198 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SYNONYMS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs198.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "USERS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs199 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'USERS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs199.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs199.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs199.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs199.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs199.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs199.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs199.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs199.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs199.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs199.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs199.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs199.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs199.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs199.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "CHECK_CONSTRAINTS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs200 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'CHECK_CONSTRAINTS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs200.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "COLLATIONS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs201 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:5*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'COLLATIONS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs201.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "COLUMNS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs202 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:48*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'COLUMNS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs202.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "COLUMN_PRIVILEGES");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs203 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'COLUMN_PRIVILEGES'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs203.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "CONSTRAINT_COLUMN_USAGE");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs204 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'CONSTRAINT_COLUMN_USAGE'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs204.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "DOMAINS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs205 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:31 t:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'DOMAINS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs205.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "DOMAIN_CONSTRAINTS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs206 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'DOMAIN_CONSTRAINTS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs206.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "ELEMENT_TYPES");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs207 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:27*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ELEMENT_TYPES'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs207.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "FIELDS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs208 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:29*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'FIELDS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs208.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "KEY_COLUMN_USAGE");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs209 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'KEY_COLUMN_USAGE'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs209.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "PARAMETERS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs210 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:31*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'PARAMETERS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs210.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "REFERENTIAL_CONSTRAINTS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs211 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'REFERENTIAL_CONSTRAINTS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs211.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "ROUTINES");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs212 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:36*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ROUTINES'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs212.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "SCHEMATA");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs213 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SCHEMATA'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs213.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "SEQUENCES");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs214 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:18*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SEQUENCES'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs214.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "TABLES");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs215 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:11*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TABLES'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs215.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "TABLE_CONSTRAINTS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs216 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TABLE_CONSTRAINTS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs216.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "TABLE_PRIVILEGES");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs217 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TABLE_PRIVILEGES'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs217.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "TRIGGERS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs218 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TRIGGERS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs218.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.setString(2, "VIEWS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs219 = prep19.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'VIEWS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs219.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep19.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/dbMeta22.getProcedures(null, "INFORMATION_SCHEMA", null);
2022-07-18 10:47:03 jdbc[18]: 
/**/rs220.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs220.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/dbMeta22.getTables(null, "PUBLIC", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.getString("TABLE_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.getString("TABLE_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs221.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/dbMeta22.getConnection();
2022-07-18 10:47:03 jdbc[18]: 
/**/PreparedStatement prep20 = conn15.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep20.setString(1, "PUBLIC");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep20.setString(2, "CUSTOMER");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs222 = prep20.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:6*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'CUSTOMER'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs222.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep20.setString(1, "PUBLIC");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep20.setString(2, "CUSTOMER_QUESTIONNAIRES");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs223 = prep20.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'CUSTOMER_QUESTIONNAIRES'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs223.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs223.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs223.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs223.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs223.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs223.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs223.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs223.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs223.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs223.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep20.setString(1, "PUBLIC");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep20.setString(2, "QUESTION");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs224 = prep20.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'QUESTION'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs224.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs224.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs224.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs224.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs224.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs224.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs224.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs224.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs224.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs224.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs224.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs224.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs224.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs224.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep20.setString(1, "PUBLIC");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep20.setString(2, "QUESTIONNAIRE");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs225 = prep20.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'QUESTIONNAIRE'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs225.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs225.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs225.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs225.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs225.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs225.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs225.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs225.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs225.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs225.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep20.setString(1, "PUBLIC");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep20.setString(2, "QUESTIONNAIRE_QUESTIONS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs226 = prep20.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:2 t:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'QUESTIONNAIRE_QUESTIONS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs226.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs226.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs226.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs226.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs226.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs226.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs226.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs226.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs226.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs226.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep20.setString(1, "PUBLIC");
2022-07-18 10:47:03 jdbc[18]: 
/**/prep20.setString(2, "QUESTION_ANSWERS");
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs227 = prep20.executeQuery();
2022-07-18 10:47:03 jdbc[18]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'QUESTION_ANSWERS'};
2022-07-18 10:47:03 jdbc[18]: 
/**/rs227.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs227.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs227.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs227.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs227.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs227.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs227.getInt("ORDINAL_POSITION");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs227.getString("COLUMN_TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs227.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs227.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep20.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/dbMeta22.getProcedures(null, "PUBLIC", null);
2022-07-18 10:47:03 jdbc[18]: 
/**/rs228.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs228.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/PreparedStatement prep21 = conn15.prepareStatement("SELECT VIEW_DEFINITION FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2022-07-18 10:47:03 jdbc[18]: Plan       : calculate cost for plan [VIEWS:-21:org.h2.table.InformationSchemaTable@10639f51]
2022-07-18 10:47:03 jdbc[18]: Plan       :   for table filter VIEWS:-21:org.h2.table.InformationSchemaTable@10639f51
2022-07-18 10:47:03 jdbc[18]: Table      :     potential plan item cost 10 000 index meta
2022-07-18 10:47:03 jdbc[18]: Table      :     potential plan item cost 28 index meta
2022-07-18 10:47:03 jdbc[18]: Plan       :   best plan item cost 27,44 index meta
2022-07-18 10:47:03 jdbc[18]: Plan       : plan cost 28,44
2022-07-18 10:47:03 jdbc[18]: 
/**/prep21.setString(1, "PUBLIC");
2022-07-18 10:47:03 jdbc[18]: 
/**/dbMeta21.getIndexInfo(null, "PUBLIC", "CUSTOMER", false, true);
2022-07-18 10:47:03 jdbc[18]: 
/**/rs229.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs229.getString("INDEX_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs229.getInt("TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs229.getBoolean("NON_UNIQUE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs229.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs229.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs229.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/dbMeta21.getIndexInfo(null, "PUBLIC", "CUSTOMER_QUESTIONNAIRES", false, true);
2022-07-18 10:47:03 jdbc[18]: 
/**/rs230.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs230.getString("INDEX_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs230.getInt("TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs230.getBoolean("NON_UNIQUE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs230.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs230.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs230.getString("INDEX_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs230.getInt("TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs230.getBoolean("NON_UNIQUE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs230.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs230.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs230.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/dbMeta21.getIndexInfo(null, "PUBLIC", "QUESTION", false, true);
2022-07-18 10:47:03 jdbc[18]: 
/**/rs231.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs231.getString("INDEX_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs231.getInt("TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs231.getBoolean("NON_UNIQUE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs231.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs231.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs231.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/dbMeta21.getIndexInfo(null, "PUBLIC", "QUESTIONNAIRE", false, true);
2022-07-18 10:47:03 jdbc[18]: 
/**/rs232.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs232.getString("INDEX_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs232.getInt("TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs232.getBoolean("NON_UNIQUE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs232.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs232.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs232.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/dbMeta21.getIndexInfo(null, "PUBLIC", "QUESTIONNAIRE_QUESTIONS", false, true);
2022-07-18 10:47:03 jdbc[18]: 
/**/rs233.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs233.getString("INDEX_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs233.getInt("TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs233.getBoolean("NON_UNIQUE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs233.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs233.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs233.getString("INDEX_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs233.getInt("TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs233.getBoolean("NON_UNIQUE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs233.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs233.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs233.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/dbMeta21.getIndexInfo(null, "PUBLIC", "QUESTION_ANSWERS", false, true);
2022-07-18 10:47:03 jdbc[18]: 
/**/rs234.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs234.getString("INDEX_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs234.getInt("TYPE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs234.getBoolean("NON_UNIQUE");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs234.getString("COLUMN_NAME");
2022-07-18 10:47:03 jdbc[18]: 
/**/rs234.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs234.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/prep21.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/Statement stat17 = conn15.createStatement();
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs235 = stat17.executeQuery("SELECT SEQUENCE_NAME, BASE_VALUE, INCREMENT FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME");
2022-07-18 10:47:03 jdbc[18]: Plan       : calculate cost for plan [SEQUENCES:-16:org.h2.table.InformationSchemaTable@510e4d79]
2022-07-18 10:47:03 jdbc[18]: Plan       :   for table filter SEQUENCES:-16:org.h2.table.InformationSchemaTable@510e4d79
2022-07-18 10:47:03 jdbc[18]: Table      :     potential plan item cost 10 000 index meta
2022-07-18 10:47:03 jdbc[18]: Table      :     potential plan item cost 4 322 index meta
2022-07-18 10:47:03 jdbc[18]: Plan       :   best plan item cost 4 322 index meta
2022-07-18 10:47:03 jdbc[18]: Plan       : plan cost 4 323
2022-07-18 10:47:03 jdbc[18]: 
/*SQL #:1*/SELECT SEQUENCE_NAME, BASE_VALUE, INCREMENT FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME;
2022-07-18 10:47:03 jdbc[18]: 
/**/rs235.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs235.getString(1);
2022-07-18 10:47:03 jdbc[18]: 
/**/rs235.getString(2);
2022-07-18 10:47:03 jdbc[18]: 
/**/rs235.getString(3);
2022-07-18 10:47:03 jdbc[18]: 
/**/rs235.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs235.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/ResultSet rs236 = stat17.executeQuery("SELECT USER_NAME, IS_ADMIN FROM INFORMATION_SCHEMA.USERS ORDER BY USER_NAME");
2022-07-18 10:47:03 jdbc[18]: Plan       : calculate cost for plan [USERS:-35:org.h2.table.InformationSchemaTable@26078de9]
2022-07-18 10:47:03 jdbc[18]: Plan       :   for table filter USERS:-35:org.h2.table.InformationSchemaTable@26078de9
2022-07-18 10:47:03 jdbc[18]: Table      :     potential plan item cost 10 000 index meta
2022-07-18 10:47:03 jdbc[18]: Plan       :   best plan item cost 10 000 index meta
2022-07-18 10:47:03 jdbc[18]: Plan       : plan cost 10 001
2022-07-18 10:47:03 jdbc[18]: 
/*SQL #:1*/SELECT USER_NAME, IS_ADMIN FROM INFORMATION_SCHEMA.USERS ORDER BY USER_NAME;
2022-07-18 10:47:03 jdbc[18]: 
/**/rs236.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs236.getString(1);
2022-07-18 10:47:03 jdbc[18]: 
/**/rs236.getString(2);
2022-07-18 10:47:03 jdbc[18]: 
/**/rs236.next();
2022-07-18 10:47:03 jdbc[18]: 
/**/rs236.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/stat17.close();
2022-07-18 10:47:03 jdbc[18]: 
/**/dbMeta21.getDatabaseProductName();
2022-07-18 10:47:03 jdbc[18]: 
/**/dbMeta21.getDatabaseProductVersion();
2022-07-18 10:47:11 jdbc[18]: 
/**/Statement stat18 = conn15.createStatement(1004, 1008);
2022-07-18 10:47:11 jdbc[18]: 
/**/stat18.setMaxRows(1000);
2022-07-18 10:47:11 jdbc[18]: 
/**/stat18.execute("SELECT * FROM CUSTOMER");
2022-07-18 10:47:11 jdbc[18]: Plan       : calculate cost for plan [PUBLIC.CUSTOMER]
2022-07-18 10:47:11 jdbc[18]: Plan       :   for table filter PUBLIC.CUSTOMER
2022-07-18 10:47:11 jdbc[18]: Table      :     potential plan item cost 10 230 index PUBLIC.CUSTOMER.tableScan
2022-07-18 10:47:11 jdbc[18]: Table      :     potential plan item cost 10 240 index PUBLIC.PRIMARY_KEY_A
2022-07-18 10:47:11 jdbc[18]: Plan       :   best plan item cost 10 230 index PUBLIC.CUSTOMER.tableScan
2022-07-18 10:47:11 jdbc[18]: Plan       : plan cost 10 231
2022-07-18 10:47:11 jdbc[18]: 
/*SQL #:3*/SELECT * FROM CUSTOMER;
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSet rs237 = stat18.getResultSet();
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta497 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/*SQL #:1*/CALL DATABASE();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta497.getColumnCount();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta497.getColumnLabel(1);
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta497.getColumnLabel(2);
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta497.getColumnLabel(3);
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta497.getColumnLabel(4);
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta497.getColumnLabel(5);
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta497.getColumnLabel(6);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.next();
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta498 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta498.getColumnType(1);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(1);
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta499 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta499.getColumnType(2);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(2);
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta500 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta500.getColumnType(3);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(3);
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta501 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta501.getColumnType(4);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(4);
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta502 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta502.getColumnType(5);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(5);
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta503 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta503.getColumnType(6);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(6);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.next();
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta504 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta504.getColumnType(1);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(1);
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta505 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta505.getColumnType(2);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(2);
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta506 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta506.getColumnType(3);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(3);
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta507 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta507.getColumnType(4);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(4);
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta508 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta508.getColumnType(5);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(5);
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta509 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta509.getColumnType(6);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(6);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.next();
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta510 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta510.getColumnType(1);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(1);
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta511 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta511.getColumnType(2);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(2);
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta512 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta512.getColumnType(3);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(3);
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta513 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta513.getColumnType(4);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(4);
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta514 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta514.getColumnType(5);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(5);
2022-07-18 10:47:11 jdbc[18]: 
/**/ResultSetMetaData rsMeta515 = rs237.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:11 jdbc[18]: 
/**/rsMeta515.getColumnType(6);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getString(6);
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.next();
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getConcurrency();
2022-07-18 10:47:11 jdbc[18]: 
/**/DatabaseMetaData dbMeta23 = conn15.getMetaData();
2022-07-18 10:47:11 jdbc[18]: 
/**/dbMeta23.getTables(null, "PUBLIC", "CUSTOMER", new String[]{"BASE TABLE"});
2022-07-18 10:47:11 jdbc[18]: 
/**/rs238.next();
2022-07-18 10:47:11 jdbc[18]: 
/**/rs238.getString("TABLE_NAME");
2022-07-18 10:47:11 jdbc[18]: 
/**/dbMeta23.getPrimaryKeys(null, "PUBLIC", "CUSTOMER");
2022-07-18 10:47:11 jdbc[18]: 
/**/rs239.next();
2022-07-18 10:47:11 jdbc[18]: 
/**/rs239.getString("COLUMN_NAME");
2022-07-18 10:47:11 jdbc[18]: 
/**/rs239.next();
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.getType();
2022-07-18 10:47:11 jdbc[18]: 
/**/rs237.close();
2022-07-18 10:47:11 jdbc[18]: 
/**/stat18.close();
2022-07-18 10:47:21 jdbc[18]: 
/**/Statement stat19 = conn15.createStatement(1004, 1008);
2022-07-18 10:47:21 jdbc[18]: 
/**/stat19.setMaxRows(1000);
2022-07-18 10:47:21 jdbc[18]: 
/**/stat19.execute("SELECT * FROM CUSTOMER QUESTION");
2022-07-18 10:47:21 jdbc[18]: Plan       : calculate cost for plan [QUESTION]
2022-07-18 10:47:21 jdbc[18]: Plan       :   for table filter QUESTION
2022-07-18 10:47:21 jdbc[18]: Table      :     potential plan item cost 10 230 index PUBLIC.CUSTOMER.tableScan
2022-07-18 10:47:21 jdbc[18]: Table      :     potential plan item cost 10 240 index PUBLIC.PRIMARY_KEY_A
2022-07-18 10:47:21 jdbc[18]: Plan       :   best plan item cost 10 230 index PUBLIC.CUSTOMER.tableScan
2022-07-18 10:47:21 jdbc[18]: Plan       : plan cost 10 231
2022-07-18 10:47:21 jdbc[18]: 
/*SQL #:3*/SELECT * FROM CUSTOMER QUESTION;
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSet rs240 = stat19.getResultSet();
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta516 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta516.getColumnCount();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta516.getColumnLabel(1);
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta516.getColumnLabel(2);
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta516.getColumnLabel(3);
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta516.getColumnLabel(4);
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta516.getColumnLabel(5);
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta516.getColumnLabel(6);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.next();
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta517 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta517.getColumnType(1);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(1);
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta518 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta518.getColumnType(2);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(2);
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta519 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta519.getColumnType(3);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(3);
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta520 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta520.getColumnType(4);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(4);
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta521 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta521.getColumnType(5);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(5);
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta522 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta522.getColumnType(6);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(6);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.next();
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta523 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta523.getColumnType(1);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(1);
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta524 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta524.getColumnType(2);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(2);
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta525 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta525.getColumnType(3);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(3);
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta526 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta526.getColumnType(4);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(4);
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta527 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta527.getColumnType(5);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(5);
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta528 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta528.getColumnType(6);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(6);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.next();
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta529 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta529.getColumnType(1);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(1);
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta530 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta530.getColumnType(2);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(2);
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta531 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta531.getColumnType(3);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(3);
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta532 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta532.getColumnType(4);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(4);
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta533 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta533.getColumnType(5);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(5);
2022-07-18 10:47:21 jdbc[18]: 
/**/ResultSetMetaData rsMeta534 = rs240.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:21 jdbc[18]: 
/**/rsMeta534.getColumnType(6);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getString(6);
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.next();
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getConcurrency();
2022-07-18 10:47:21 jdbc[18]: 
/**/DatabaseMetaData dbMeta24 = conn15.getMetaData();
2022-07-18 10:47:21 jdbc[18]: 
/**/dbMeta24.getTables(null, "PUBLIC", "CUSTOMER", new String[]{"BASE TABLE"});
2022-07-18 10:47:21 jdbc[18]: 
/**/rs241.next();
2022-07-18 10:47:21 jdbc[18]: 
/**/rs241.getString("TABLE_NAME");
2022-07-18 10:47:21 jdbc[18]: 
/**/dbMeta24.getPrimaryKeys(null, "PUBLIC", "CUSTOMER");
2022-07-18 10:47:21 jdbc[18]: 
/**/rs242.next();
2022-07-18 10:47:21 jdbc[18]: 
/**/rs242.getString("COLUMN_NAME");
2022-07-18 10:47:21 jdbc[18]: 
/**/rs242.next();
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.getType();
2022-07-18 10:47:21 jdbc[18]: 
/**/rs240.close();
2022-07-18 10:47:21 jdbc[18]: 
/**/stat19.close();
2022-07-18 10:47:28 jdbc[18]: 
/**/Statement stat20 = conn15.createStatement(1004, 1008);
2022-07-18 10:47:28 jdbc[18]: 
/**/stat20.setMaxRows(1000);
2022-07-18 10:47:28 jdbc[18]: 
/**/stat20.execute("SELECT * FROM QUESTION");
2022-07-18 10:47:28 jdbc[18]: Plan       : calculate cost for plan [PUBLIC.QUESTION]
2022-07-18 10:47:28 jdbc[18]: Plan       :   for table filter PUBLIC.QUESTION
2022-07-18 10:47:28 jdbc[18]: Table      :     potential plan item cost 10 230 index PUBLIC.QUESTION.tableScan
2022-07-18 10:47:28 jdbc[18]: Table      :     potential plan item cost 10 240 index PUBLIC.PRIMARY_KEY_C
2022-07-18 10:47:28 jdbc[18]: Plan       :   best plan item cost 10 230 index PUBLIC.QUESTION.tableScan
2022-07-18 10:47:28 jdbc[18]: Plan       : plan cost 10 231
2022-07-18 10:47:28 jdbc[18]: 
/*SQL #:3*/SELECT * FROM QUESTION;
2022-07-18 10:47:28 jdbc[18]: 
/**/ResultSet rs243 = stat20.getResultSet();
2022-07-18 10:47:28 jdbc[18]: 
/**/ResultSetMetaData rsMeta535 = rs243.getMetaData();
2022-07-18 10:47:28 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:28 jdbc[18]: 
/**/rsMeta535.getColumnCount();
2022-07-18 10:47:28 jdbc[18]: 
/**/rsMeta535.getColumnLabel(1);
2022-07-18 10:47:28 jdbc[18]: 
/**/rsMeta535.getColumnLabel(2);
2022-07-18 10:47:28 jdbc[18]: 
/**/rsMeta535.getColumnLabel(3);
2022-07-18 10:47:28 jdbc[18]: 
/**/rs243.next();
2022-07-18 10:47:28 jdbc[18]: 
/**/ResultSetMetaData rsMeta536 = rs243.getMetaData();
2022-07-18 10:47:28 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:28 jdbc[18]: 
/**/rsMeta536.getColumnType(1);
2022-07-18 10:47:28 jdbc[18]: 
/**/rs243.getString(1);
2022-07-18 10:47:28 jdbc[18]: 
/**/ResultSetMetaData rsMeta537 = rs243.getMetaData();
2022-07-18 10:47:28 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:28 jdbc[18]: 
/**/rsMeta537.getColumnType(2);
2022-07-18 10:47:28 jdbc[18]: 
/**/rs243.getString(2);
2022-07-18 10:47:28 jdbc[18]: 
/**/ResultSetMetaData rsMeta538 = rs243.getMetaData();
2022-07-18 10:47:28 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:28 jdbc[18]: 
/**/rsMeta538.getColumnType(3);
2022-07-18 10:47:28 jdbc[18]: 
/**/rs243.getString(3);
2022-07-18 10:47:28 jdbc[18]: 
/**/rs243.next();
2022-07-18 10:47:28 jdbc[18]: 
/**/ResultSetMetaData rsMeta539 = rs243.getMetaData();
2022-07-18 10:47:28 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:28 jdbc[18]: 
/**/rsMeta539.getColumnType(1);
2022-07-18 10:47:28 jdbc[18]: 
/**/rs243.getString(1);
2022-07-18 10:47:28 jdbc[18]: 
/**/ResultSetMetaData rsMeta540 = rs243.getMetaData();
2022-07-18 10:47:28 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:28 jdbc[18]: 
/**/rsMeta540.getColumnType(2);
2022-07-18 10:47:28 jdbc[18]: 
/**/rs243.getString(2);
2022-07-18 10:47:28 jdbc[18]: 
/**/ResultSetMetaData rsMeta541 = rs243.getMetaData();
2022-07-18 10:47:28 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:28 jdbc[18]: 
/**/rsMeta541.getColumnType(3);
2022-07-18 10:47:28 jdbc[18]: 
/**/rs243.getString(3);
2022-07-18 10:47:28 jdbc[18]: 
/**/rs243.next();
2022-07-18 10:47:28 jdbc[18]: 
/**/ResultSetMetaData rsMeta542 = rs243.getMetaData();
2022-07-18 10:47:28 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:28 jdbc[18]: 
/**/rsMeta542.getColumnType(1);
2022-07-18 10:47:28 jdbc[18]: 
/**/rs243.getString(1);
2022-07-18 10:47:28 jdbc[18]: 
/**/ResultSetMetaData rsMeta543 = rs243.getMetaData();
2022-07-18 10:47:28 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:28 jdbc[18]: 
/**/rsMeta543.getColumnType(2);
2022-07-18 10:47:28 jdbc[18]: 
/**/rs243.getString(2);
2022-07-18 10:47:28 jdbc[18]: 
/**/ResultSetMetaData rsMeta544 = rs243.getMetaData();
2022-07-18 10:47:28 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:28 jdbc[18]: 
/**/rsMeta544.getColumnType(3);
2022-07-18 10:47:28 jdbc[18]: 
/**/rs243.getString(3);
2022-07-18 10:47:28 jdbc[18]: 
/**/rs243.next();
2022-07-18 10:47:28 jdbc[18]: 
/**/rs243.getConcurrency();
2022-07-18 10:47:28 jdbc[18]: 
/**/DatabaseMetaData dbMeta25 = conn15.getMetaData();
2022-07-18 10:47:28 jdbc[18]: 
/**/dbMeta25.getTables(null, "PUBLIC", "QUESTION", new String[]{"BASE TABLE"});
2022-07-18 10:47:28 jdbc[18]: 
/**/rs244.next();
2022-07-18 10:47:28 jdbc[18]: 
/**/rs244.getString("TABLE_NAME");
2022-07-18 10:47:28 jdbc[18]: 
/**/dbMeta25.getPrimaryKeys(null, "PUBLIC", "QUESTION");
2022-07-18 10:47:28 jdbc[18]: 
/**/rs245.next();
2022-07-18 10:47:28 jdbc[18]: 
/**/rs245.getString("COLUMN_NAME");
2022-07-18 10:47:28 jdbc[18]: 
/**/rs245.next();
2022-07-18 10:47:28 jdbc[18]: 
/**/rs243.getType();
2022-07-18 10:47:28 jdbc[18]: 
/**/rs243.close();
2022-07-18 10:47:28 jdbc[18]: 
/**/stat20.close();
2022-07-18 10:47:33 jdbc[18]: 
/**/Statement stat21 = conn15.createStatement(1004, 1008);
2022-07-18 10:47:33 jdbc[18]: 
/**/stat21.setMaxRows(1000);
2022-07-18 10:47:33 jdbc[18]: 
/**/stat21.execute("SELECT * FROM CUSTOMER");
2022-07-18 10:47:33 jdbc[18]: 
/*SQL #:3*/SELECT * FROM CUSTOMER;
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSet rs246 = stat21.getResultSet();
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta545 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta545.getColumnCount();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta545.getColumnLabel(1);
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta545.getColumnLabel(2);
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta545.getColumnLabel(3);
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta545.getColumnLabel(4);
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta545.getColumnLabel(5);
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta545.getColumnLabel(6);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.next();
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta546 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta546.getColumnType(1);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(1);
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta547 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta547.getColumnType(2);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(2);
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta548 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta548.getColumnType(3);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(3);
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta549 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta549.getColumnType(4);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(4);
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta550 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta550.getColumnType(5);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(5);
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta551 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta551.getColumnType(6);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(6);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.next();
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta552 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta552.getColumnType(1);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(1);
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta553 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta553.getColumnType(2);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(2);
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta554 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta554.getColumnType(3);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(3);
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta555 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta555.getColumnType(4);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(4);
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta556 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta556.getColumnType(5);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(5);
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta557 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta557.getColumnType(6);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(6);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.next();
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta558 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta558.getColumnType(1);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(1);
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta559 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta559.getColumnType(2);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(2);
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta560 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta560.getColumnType(3);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(3);
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta561 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta561.getColumnType(4);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(4);
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta562 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta562.getColumnType(5);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(5);
2022-07-18 10:47:33 jdbc[18]: 
/**/ResultSetMetaData rsMeta563 = rs246.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:47:33 jdbc[18]: 
/**/rsMeta563.getColumnType(6);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getString(6);
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.next();
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getConcurrency();
2022-07-18 10:47:33 jdbc[18]: 
/**/DatabaseMetaData dbMeta26 = conn15.getMetaData();
2022-07-18 10:47:33 jdbc[18]: 
/**/dbMeta26.getTables(null, "PUBLIC", "CUSTOMER", new String[]{"BASE TABLE"});
2022-07-18 10:47:33 jdbc[18]: 
/**/rs247.next();
2022-07-18 10:47:33 jdbc[18]: 
/**/rs247.getString("TABLE_NAME");
2022-07-18 10:47:33 jdbc[18]: 
/**/dbMeta26.getPrimaryKeys(null, "PUBLIC", "CUSTOMER");
2022-07-18 10:47:33 jdbc[18]: 
/**/rs248.next();
2022-07-18 10:47:33 jdbc[18]: 
/**/rs248.getString("COLUMN_NAME");
2022-07-18 10:47:33 jdbc[18]: 
/**/rs248.next();
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.getType();
2022-07-18 10:47:33 jdbc[18]: 
/**/rs246.close();
2022-07-18 10:47:33 jdbc[18]: 
/**/stat21.close();
2022-07-18 10:48:58 jdbc[18]: 
/**/conn15.close();
2022-07-18 10:48:58 lock: 18 shared read unlock SYS 
2022-07-18 10:48:58 database: disconnecting session #18
2022-07-18 10:48:58 database: disconnected session #18
2022-07-18 10:49:12 database: connecting session #19 to C:/Users/User/IdeaProjects/Questionnaire/database
2022-07-18 10:49:58 jdbc[13]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2022-07-18 10:49:58 jdbc[13]: 
/**/Connection conn10 = DriverManager.getConnection("jdbc:h2:file:./database;TRACE_LEVEL_FILE=3;TRACE_LEVEL_SYSTEM_OUT=3", "DEN", "");
2022-07-18 10:49:58 jdbc[13]: 
/**/conn10.close();
2022-07-18 10:49:58 lock: 13 shared read unlock SYS 
2022-07-18 10:49:58 database: disconnecting session #13
2022-07-18 10:49:58 database: disconnected session #13
2022-07-18 10:50:00 database: connecting session #14 to C:/Users/User/IdeaProjects/Questionnaire/database
2022-07-18 10:50:00 jdbc[14]: 
/*SQL */SET TRACE_LEVEL_SYSTEM_OUT 3;
2022-07-18 10:50:00 jdbc[14]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2022-07-18 10:50:00 jdbc[14]: 
/**/Connection conn11 = DriverManager.getConnection("jdbc:h2:file:./database;TRACE_LEVEL_FILE=3;TRACE_LEVEL_SYSTEM_OUT=3", "DEN", "");
2022-07-18 10:50:00 jdbc[14]: 
/**/DatabaseMetaData dbMeta4 = conn11.getMetaData();
2022-07-18 10:50:00 jdbc[14]: 
/**/DatabaseMetaData dbMeta5 = conn11.getMetaData();
2022-07-18 10:50:00 jdbc[14]: 
/**/dbMeta5.storesLowerCaseIdentifiers();
2022-07-18 10:50:00 jdbc[14]: 
/**/dbMeta5.getSchemas();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs22.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs22.getString("TABLE_SCHEM");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs22.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs22.getString("TABLE_SCHEM");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs22.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs22.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/dbMeta5.getTables(null, "INFORMATION_SCHEMA", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs23.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/dbMeta5.getConnection();
2022-07-18 10:50:00 jdbc[14]: 
/**/PreparedStatement prep6 = conn11.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2");
2022-07-18 10:50:00 jdbc[14]: Plan       : calculate cost for plan [COLUMNS:-4:org.h2.table.InformationSchemaTable@363207b]
2022-07-18 10:50:00 jdbc[14]: Plan       :   for table filter COLUMNS:-4:org.h2.table.InformationSchemaTable@363207b
2022-07-18 10:50:00 jdbc[14]: Table      :     potential plan item cost 10 000 index meta
2022-07-18 10:50:00 jdbc[14]: Table      :     potential plan item cost 28 index meta
2022-07-18 10:50:00 jdbc[14]: Plan       :   best plan item cost 27,44 index meta
2022-07-18 10:50:00 jdbc[14]: Plan       : plan cost 28,44
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "CONSTANTS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs24 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:27 t:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'CONSTANTS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs24.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "ENUM_VALUES");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs25 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:7 t:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ENUM_VALUES'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs25.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "INDEXES");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs26 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:10*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'INDEXES'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs26.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "INDEX_COLUMNS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs27 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:11*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'INDEX_COLUMNS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs27.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "INFORMATION_SCHEMA_CATALOG_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs28 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'INFORMATION_SCHEMA_CATALOG_NAME'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs28.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs28.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs28.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs28.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs28.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs28.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "IN_DOUBT");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs29 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'IN_DOUBT'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs29.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs29.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs29.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs29.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs29.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs29.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs29.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs29.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs29.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs29.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "LOCKS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs30 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'LOCKS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs30.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "QUERY_STATISTICS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs31 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'QUERY_STATISTICS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs31.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "RIGHTS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs32 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:6*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'RIGHTS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs32.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "ROLES");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs33 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ROLES'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs33.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs33.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs33.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs33.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs33.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs33.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs33.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs33.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs33.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs33.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "SESSIONS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs34 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:13 t:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SESSIONS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs34.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "SESSION_STATE");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs35 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SESSION_STATE'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs35.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs35.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs35.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs35.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs35.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs35.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs35.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs35.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs35.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs35.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "SETTINGS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs36 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SETTINGS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs36.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs36.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs36.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs36.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs36.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs36.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs36.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs36.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs36.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs36.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "SYNONYMS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs37 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:8 t:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SYNONYMS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs37.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "USERS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs38 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'USERS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs38.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs38.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs38.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs38.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs38.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs38.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs38.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs38.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs38.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs38.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs38.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs38.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs38.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs38.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "CHECK_CONSTRAINTS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs39 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:4 t:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'CHECK_CONSTRAINTS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs39.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "COLLATIONS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs40 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:5*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'COLLATIONS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs40.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "COLUMNS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs41 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:48 t:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'COLUMNS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs41.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "COLUMN_PRIVILEGES");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs42 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'COLUMN_PRIVILEGES'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs42.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "CONSTRAINT_COLUMN_USAGE");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs43 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'CONSTRAINT_COLUMN_USAGE'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs43.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "DOMAINS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs44 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:31 t:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'DOMAINS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs44.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "DOMAIN_CONSTRAINTS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs45 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'DOMAIN_CONSTRAINTS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs45.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "ELEMENT_TYPES");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs46 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:27 t:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ELEMENT_TYPES'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs46.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "FIELDS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs47 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:29 t:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'FIELDS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs47.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "KEY_COLUMN_USAGE");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs48 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'KEY_COLUMN_USAGE'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs48.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "PARAMETERS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs49 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:31*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'PARAMETERS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs49.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "REFERENTIAL_CONSTRAINTS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs50 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'REFERENTIAL_CONSTRAINTS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs50.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "ROUTINES");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs51 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:36*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ROUTINES'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs51.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "SCHEMATA");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs52 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SCHEMATA'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs52.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "SEQUENCES");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs53 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:18*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SEQUENCES'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs53.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "TABLES");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs54 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:11*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TABLES'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs54.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "TABLE_CONSTRAINTS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs55 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TABLE_CONSTRAINTS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs55.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "TABLE_PRIVILEGES");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs56 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TABLE_PRIVILEGES'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs56.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "TRIGGERS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs57 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TRIGGERS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs57.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.setString(2, "VIEWS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs58 = prep6.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'VIEWS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs58.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep6.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/dbMeta5.getProcedures(null, "INFORMATION_SCHEMA", null);
2022-07-18 10:50:00 jdbc[14]: 
/**/rs59.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs59.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/dbMeta5.getTables(null, "PUBLIC", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.getString("TABLE_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.getString("TABLE_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs60.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/dbMeta5.getConnection();
2022-07-18 10:50:00 jdbc[14]: 
/**/PreparedStatement prep7 = conn11.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep7.setString(1, "PUBLIC");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep7.setString(2, "CUSTOMER");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs61 = prep7.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:6*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'CUSTOMER'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs61.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep7.setString(1, "PUBLIC");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep7.setString(2, "CUSTOMER_QUESTIONNAIRES");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs62 = prep7.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'CUSTOMER_QUESTIONNAIRES'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs62.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs62.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs62.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs62.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs62.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs62.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs62.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs62.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs62.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs62.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep7.setString(1, "PUBLIC");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep7.setString(2, "QUESTION");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs63 = prep7.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'QUESTION'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs63.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs63.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs63.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs63.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs63.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs63.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs63.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs63.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs63.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs63.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs63.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs63.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs63.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs63.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep7.setString(1, "PUBLIC");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep7.setString(2, "QUESTIONNAIRE");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs64 = prep7.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'QUESTIONNAIRE'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs64.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs64.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs64.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs64.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs64.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs64.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs64.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs64.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs64.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs64.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep7.setString(1, "PUBLIC");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep7.setString(2, "QUESTIONNAIRE_QUESTIONS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs65 = prep7.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'QUESTIONNAIRE_QUESTIONS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs65.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs65.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs65.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs65.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs65.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs65.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs65.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs65.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs65.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs65.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep7.setString(1, "PUBLIC");
2022-07-18 10:50:00 jdbc[14]: 
/**/prep7.setString(2, "QUESTION_ANSWERS");
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs66 = prep7.executeQuery();
2022-07-18 10:50:00 jdbc[14]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'QUESTION_ANSWERS'};
2022-07-18 10:50:00 jdbc[14]: 
/**/rs66.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs66.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs66.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs66.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs66.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs66.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs66.getInt("ORDINAL_POSITION");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs66.getString("COLUMN_TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs66.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs66.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep7.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/dbMeta5.getProcedures(null, "PUBLIC", null);
2022-07-18 10:50:00 jdbc[14]: 
/**/rs67.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs67.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/PreparedStatement prep8 = conn11.prepareStatement("SELECT VIEW_DEFINITION FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2022-07-18 10:50:00 jdbc[14]: Plan       : calculate cost for plan [VIEWS:-21:org.h2.table.InformationSchemaTable@133d3768]
2022-07-18 10:50:00 jdbc[14]: Plan       :   for table filter VIEWS:-21:org.h2.table.InformationSchemaTable@133d3768
2022-07-18 10:50:00 jdbc[14]: Table      :     potential plan item cost 10 000 index meta
2022-07-18 10:50:00 jdbc[14]: Table      :     potential plan item cost 28 index meta
2022-07-18 10:50:00 jdbc[14]: Plan       :   best plan item cost 27,44 index meta
2022-07-18 10:50:00 jdbc[14]: Plan       : plan cost 28,44
2022-07-18 10:50:00 jdbc[14]: 
/**/prep8.setString(1, "PUBLIC");
2022-07-18 10:50:00 jdbc[14]: 
/**/dbMeta4.getIndexInfo(null, "PUBLIC", "CUSTOMER", false, true);
2022-07-18 10:50:00 jdbc[14]: 
/**/rs68.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs68.getString("INDEX_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs68.getInt("TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs68.getBoolean("NON_UNIQUE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs68.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs68.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs68.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/dbMeta4.getIndexInfo(null, "PUBLIC", "CUSTOMER_QUESTIONNAIRES", false, true);
2022-07-18 10:50:00 jdbc[14]: 
/**/rs69.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs69.getString("INDEX_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs69.getInt("TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs69.getBoolean("NON_UNIQUE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs69.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs69.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs69.getString("INDEX_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs69.getInt("TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs69.getBoolean("NON_UNIQUE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs69.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs69.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs69.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/dbMeta4.getIndexInfo(null, "PUBLIC", "QUESTION", false, true);
2022-07-18 10:50:00 jdbc[14]: 
/**/rs70.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs70.getString("INDEX_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs70.getInt("TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs70.getBoolean("NON_UNIQUE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs70.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs70.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs70.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/dbMeta4.getIndexInfo(null, "PUBLIC", "QUESTIONNAIRE", false, true);
2022-07-18 10:50:00 jdbc[14]: 
/**/rs71.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs71.getString("INDEX_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs71.getInt("TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs71.getBoolean("NON_UNIQUE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs71.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs71.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs71.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/dbMeta4.getIndexInfo(null, "PUBLIC", "QUESTIONNAIRE_QUESTIONS", false, true);
2022-07-18 10:50:00 jdbc[14]: 
/**/rs72.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs72.getString("INDEX_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs72.getInt("TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs72.getBoolean("NON_UNIQUE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs72.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs72.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs72.getString("INDEX_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs72.getInt("TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs72.getBoolean("NON_UNIQUE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs72.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs72.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs72.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/dbMeta4.getIndexInfo(null, "PUBLIC", "QUESTION_ANSWERS", false, true);
2022-07-18 10:50:00 jdbc[14]: 
/**/rs73.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs73.getString("INDEX_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs73.getInt("TYPE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs73.getBoolean("NON_UNIQUE");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs73.getString("COLUMN_NAME");
2022-07-18 10:50:00 jdbc[14]: 
/**/rs73.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs73.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/prep8.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/Statement stat1 = conn11.createStatement();
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs74 = stat1.executeQuery("SELECT SEQUENCE_NAME, BASE_VALUE, INCREMENT FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME");
2022-07-18 10:50:00 jdbc[14]: Plan       : calculate cost for plan [SEQUENCES:-16:org.h2.table.InformationSchemaTable@4ef31221]
2022-07-18 10:50:00 jdbc[14]: Plan       :   for table filter SEQUENCES:-16:org.h2.table.InformationSchemaTable@4ef31221
2022-07-18 10:50:00 jdbc[14]: Table      :     potential plan item cost 10 000 index meta
2022-07-18 10:50:00 jdbc[14]: Table      :     potential plan item cost 4 322 index meta
2022-07-18 10:50:00 jdbc[14]: Plan       :   best plan item cost 4 322 index meta
2022-07-18 10:50:00 jdbc[14]: Plan       : plan cost 4 323
2022-07-18 10:50:00 jdbc[14]: 
/*SQL #:1*/SELECT SEQUENCE_NAME, BASE_VALUE, INCREMENT FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME;
2022-07-18 10:50:00 jdbc[14]: 
/**/rs74.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs74.getString(1);
2022-07-18 10:50:00 jdbc[14]: 
/**/rs74.getString(2);
2022-07-18 10:50:00 jdbc[14]: 
/**/rs74.getString(3);
2022-07-18 10:50:00 jdbc[14]: 
/**/rs74.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs74.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/ResultSet rs75 = stat1.executeQuery("SELECT USER_NAME, IS_ADMIN FROM INFORMATION_SCHEMA.USERS ORDER BY USER_NAME");
2022-07-18 10:50:00 jdbc[14]: Plan       : calculate cost for plan [USERS:-35:org.h2.table.InformationSchemaTable@3da0df34]
2022-07-18 10:50:00 jdbc[14]: Plan       :   for table filter USERS:-35:org.h2.table.InformationSchemaTable@3da0df34
2022-07-18 10:50:00 jdbc[14]: Table      :     potential plan item cost 10 000 index meta
2022-07-18 10:50:00 jdbc[14]: Plan       :   best plan item cost 10 000 index meta
2022-07-18 10:50:00 jdbc[14]: Plan       : plan cost 10 001
2022-07-18 10:50:00 jdbc[14]: 
/*SQL #:1*/SELECT USER_NAME, IS_ADMIN FROM INFORMATION_SCHEMA.USERS ORDER BY USER_NAME;
2022-07-18 10:50:00 jdbc[14]: 
/**/rs75.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs75.getString(1);
2022-07-18 10:50:00 jdbc[14]: 
/**/rs75.getString(2);
2022-07-18 10:50:00 jdbc[14]: 
/**/rs75.next();
2022-07-18 10:50:00 jdbc[14]: 
/**/rs75.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/stat1.close();
2022-07-18 10:50:00 jdbc[14]: 
/**/dbMeta4.getDatabaseProductName();
2022-07-18 10:50:00 jdbc[14]: 
/**/dbMeta4.getDatabaseProductVersion();
2022-07-18 10:50:11 database: connecting session #15 to C:/Users/User/IdeaProjects/Questionnaire/database
2022-07-18 10:50:11 jdbc[15]: 
/**/Connection conn12 = DriverManager.getConnection("jdbc:h2:file:./database", "DEN", "");
2022-07-18 10:50:11 jdbc[15]: 
/**/conn12.close();
2022-07-18 10:50:11 lock: 15 shared read unlock SYS 
2022-07-18 10:50:11 database: disconnecting session #15
2022-07-18 10:50:11 database: disconnected session #15
2022-07-18 10:50:12 database: connecting session #16 to C:/Users/User/IdeaProjects/Questionnaire/database
2022-07-18 10:50:12 jdbc[16]: 
/**/Connection conn13 = DriverManager.getConnection("jdbc:h2:file:./database", "DEN", "");
2022-07-18 10:50:12 jdbc[16]: 
/**/DatabaseMetaData dbMeta6 = conn13.getMetaData();
2022-07-18 10:50:12 jdbc[16]: 
/**/DatabaseMetaData dbMeta7 = conn13.getMetaData();
2022-07-18 10:50:12 jdbc[16]: 
/**/dbMeta7.storesLowerCaseIdentifiers();
2022-07-18 10:50:12 jdbc[16]: 
/**/dbMeta7.getSchemas();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs76.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs76.getString("TABLE_SCHEM");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs76.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs76.getString("TABLE_SCHEM");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs76.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs76.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/dbMeta7.getTables(null, "INFORMATION_SCHEMA", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs77.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/dbMeta7.getConnection();
2022-07-18 10:50:12 jdbc[16]: 
/**/PreparedStatement prep9 = conn13.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2");
2022-07-18 10:50:12 jdbc[16]: Plan       : calculate cost for plan [COLUMNS:-4:org.h2.table.InformationSchemaTable@363207b]
2022-07-18 10:50:12 jdbc[16]: Plan       :   for table filter COLUMNS:-4:org.h2.table.InformationSchemaTable@363207b
2022-07-18 10:50:12 jdbc[16]: Table      :     potential plan item cost 10 000 index meta
2022-07-18 10:50:12 jdbc[16]: Table      :     potential plan item cost 28 index meta
2022-07-18 10:50:12 jdbc[16]: Plan       :   best plan item cost 27,44 index meta
2022-07-18 10:50:12 jdbc[16]: Plan       : plan cost 28,44
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "CONSTANTS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs78 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:27*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'CONSTANTS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs78.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "ENUM_VALUES");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs79 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ENUM_VALUES'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs79.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "INDEXES");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs80 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:10*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'INDEXES'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs80.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "INDEX_COLUMNS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs81 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:11*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'INDEX_COLUMNS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs81.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "INFORMATION_SCHEMA_CATALOG_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs82 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'INFORMATION_SCHEMA_CATALOG_NAME'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs82.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs82.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs82.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs82.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs82.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs82.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "IN_DOUBT");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs83 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'IN_DOUBT'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs83.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs83.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs83.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs83.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs83.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs83.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs83.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs83.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs83.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs83.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "LOCKS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs84 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'LOCKS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs84.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "QUERY_STATISTICS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs85 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'QUERY_STATISTICS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs85.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "RIGHTS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs86 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:6*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'RIGHTS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs86.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "ROLES");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs87 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ROLES'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs87.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs87.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs87.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs87.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs87.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs87.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs87.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs87.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs87.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs87.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "SESSIONS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs88 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:13*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SESSIONS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs88.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "SESSION_STATE");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs89 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SESSION_STATE'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs89.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs89.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs89.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs89.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs89.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs89.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs89.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs89.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs89.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs89.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "SETTINGS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs90 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SETTINGS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs90.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs90.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs90.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs90.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs90.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs90.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs90.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs90.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs90.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs90.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "SYNONYMS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs91 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SYNONYMS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs91.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "USERS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs92 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'USERS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs92.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs92.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs92.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs92.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs92.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs92.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs92.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs92.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs92.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs92.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs92.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs92.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs92.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs92.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "CHECK_CONSTRAINTS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs93 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'CHECK_CONSTRAINTS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs93.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "COLLATIONS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs94 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:5*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'COLLATIONS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs94.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "COLUMNS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs95 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:48*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'COLUMNS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs95.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "COLUMN_PRIVILEGES");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs96 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'COLUMN_PRIVILEGES'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs96.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "CONSTRAINT_COLUMN_USAGE");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs97 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'CONSTRAINT_COLUMN_USAGE'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs97.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "DOMAINS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs98 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:31*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'DOMAINS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs98.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "DOMAIN_CONSTRAINTS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs99 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'DOMAIN_CONSTRAINTS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs99.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "ELEMENT_TYPES");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs100 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:27*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ELEMENT_TYPES'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs100.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "FIELDS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs101 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:29*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'FIELDS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs101.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "KEY_COLUMN_USAGE");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs102 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'KEY_COLUMN_USAGE'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs102.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "PARAMETERS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs103 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:31*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'PARAMETERS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs103.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "REFERENTIAL_CONSTRAINTS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs104 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'REFERENTIAL_CONSTRAINTS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs104.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "ROUTINES");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs105 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:36 t:6*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ROUTINES'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs105.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "SCHEMATA");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs106 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SCHEMATA'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs106.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "SEQUENCES");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs107 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:18*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SEQUENCES'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs107.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "TABLES");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs108 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:11*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TABLES'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs108.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "TABLE_CONSTRAINTS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs109 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TABLE_CONSTRAINTS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs109.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "TABLE_PRIVILEGES");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs110 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TABLE_PRIVILEGES'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs110.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "TRIGGERS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs111 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TRIGGERS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs111.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.setString(2, "VIEWS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs112 = prep9.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'VIEWS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs112.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep9.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/dbMeta7.getProcedures(null, "INFORMATION_SCHEMA", null);
2022-07-18 10:50:12 jdbc[16]: 
/**/rs113.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs113.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/dbMeta7.getTables(null, "PUBLIC", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.getString("TABLE_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.getString("TABLE_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs114.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/dbMeta7.getConnection();
2022-07-18 10:50:12 jdbc[16]: 
/**/PreparedStatement prep10 = conn13.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep10.setString(1, "PUBLIC");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep10.setString(2, "CUSTOMER");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs115 = prep10.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:6*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'CUSTOMER'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs115.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep10.setString(1, "PUBLIC");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep10.setString(2, "CUSTOMER_QUESTIONNAIRES");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs116 = prep10.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'CUSTOMER_QUESTIONNAIRES'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs116.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs116.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs116.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs116.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs116.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs116.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs116.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs116.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs116.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs116.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep10.setString(1, "PUBLIC");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep10.setString(2, "QUESTION");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs117 = prep10.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'QUESTION'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs117.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs117.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs117.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs117.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs117.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs117.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs117.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs117.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs117.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs117.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs117.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs117.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs117.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs117.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep10.setString(1, "PUBLIC");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep10.setString(2, "QUESTIONNAIRE");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs118 = prep10.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'QUESTIONNAIRE'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs118.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs118.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs118.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs118.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs118.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs118.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs118.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs118.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs118.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs118.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep10.setString(1, "PUBLIC");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep10.setString(2, "QUESTIONNAIRE_QUESTIONS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs119 = prep10.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'QUESTIONNAIRE_QUESTIONS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs119.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs119.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs119.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs119.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs119.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs119.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs119.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs119.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs119.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs119.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep10.setString(1, "PUBLIC");
2022-07-18 10:50:12 jdbc[16]: 
/**/prep10.setString(2, "QUESTION_ANSWERS");
2022-07-18 10:50:12 jdbc[16]: 
/**/ResultSet rs120 = prep10.executeQuery();
2022-07-18 10:50:12 jdbc[16]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'QUESTION_ANSWERS'};
2022-07-18 10:50:12 jdbc[16]: 
/**/rs120.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs120.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs120.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs120.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs120.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs120.getString("COLUMN_NAME");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs120.getInt("ORDINAL_POSITION");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs120.getString("COLUMN_TYPE");
2022-07-18 10:50:12 jdbc[16]: 
/**/rs120.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs120.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/prep10.close();
2022-07-18 10:50:12 jdbc[16]: 
/**/dbMeta7.getProcedures(null, "PUBLIC", null);
2022-07-18 10:50:12 jdbc[16]: 
/**/rs121.next();
2022-07-18 10:50:12 jdbc[16]: 
/**/rs121.close();
2022-07-18 10:50:13 jdbc[16]: 
/**/PreparedStatement prep11 = conn13.prepareStatement("SELECT VIEW_DEFINITION FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2022-07-18 10:50:13 jdbc[16]: Plan       : calculate cost for plan [VIEWS:-21:org.h2.table.InformationSchemaTable@133d3768]
2022-07-18 10:50:13 jdbc[16]: Plan       :   for table filter VIEWS:-21:org.h2.table.InformationSchemaTable@133d3768
2022-07-18 10:50:13 jdbc[16]: Table      :     potential plan item cost 10 000 index meta
2022-07-18 10:50:13 jdbc[16]: Table      :     potential plan item cost 28 index meta
2022-07-18 10:50:13 jdbc[16]: Plan       :   best plan item cost 27,44 index meta
2022-07-18 10:50:13 jdbc[16]: Plan       : plan cost 28,44
2022-07-18 10:50:13 jdbc[16]: 
/**/prep11.setString(1, "PUBLIC");
2022-07-18 10:50:13 jdbc[16]: 
/**/dbMeta6.getIndexInfo(null, "PUBLIC", "CUSTOMER", false, true);
2022-07-18 10:50:13 jdbc[16]: 
/**/rs122.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs122.getString("INDEX_NAME");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs122.getInt("TYPE");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs122.getBoolean("NON_UNIQUE");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs122.getString("COLUMN_NAME");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs122.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs122.close();
2022-07-18 10:50:13 jdbc[16]: 
/**/dbMeta6.getIndexInfo(null, "PUBLIC", "CUSTOMER_QUESTIONNAIRES", false, true);
2022-07-18 10:50:13 jdbc[16]: 
/**/rs123.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs123.getString("INDEX_NAME");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs123.getInt("TYPE");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs123.getBoolean("NON_UNIQUE");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs123.getString("COLUMN_NAME");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs123.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs123.getString("INDEX_NAME");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs123.getInt("TYPE");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs123.getBoolean("NON_UNIQUE");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs123.getString("COLUMN_NAME");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs123.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs123.close();
2022-07-18 10:50:13 jdbc[16]: 
/**/dbMeta6.getIndexInfo(null, "PUBLIC", "QUESTION", false, true);
2022-07-18 10:50:13 jdbc[16]: 
/**/rs124.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs124.getString("INDEX_NAME");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs124.getInt("TYPE");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs124.getBoolean("NON_UNIQUE");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs124.getString("COLUMN_NAME");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs124.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs124.close();
2022-07-18 10:50:13 jdbc[16]: 
/**/dbMeta6.getIndexInfo(null, "PUBLIC", "QUESTIONNAIRE", false, true);
2022-07-18 10:50:13 jdbc[16]: 
/**/rs125.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs125.getString("INDEX_NAME");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs125.getInt("TYPE");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs125.getBoolean("NON_UNIQUE");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs125.getString("COLUMN_NAME");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs125.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs125.close();
2022-07-18 10:50:13 jdbc[16]: 
/**/dbMeta6.getIndexInfo(null, "PUBLIC", "QUESTIONNAIRE_QUESTIONS", false, true);
2022-07-18 10:50:13 jdbc[16]: 
/**/rs126.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs126.getString("INDEX_NAME");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs126.getInt("TYPE");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs126.getBoolean("NON_UNIQUE");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs126.getString("COLUMN_NAME");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs126.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs126.getString("INDEX_NAME");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs126.getInt("TYPE");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs126.getBoolean("NON_UNIQUE");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs126.getString("COLUMN_NAME");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs126.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs126.close();
2022-07-18 10:50:13 jdbc[16]: 
/**/dbMeta6.getIndexInfo(null, "PUBLIC", "QUESTION_ANSWERS", false, true);
2022-07-18 10:50:13 jdbc[16]: 
/**/rs127.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs127.getString("INDEX_NAME");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs127.getInt("TYPE");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs127.getBoolean("NON_UNIQUE");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs127.getString("COLUMN_NAME");
2022-07-18 10:50:13 jdbc[16]: 
/**/rs127.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs127.close();
2022-07-18 10:50:13 jdbc[16]: 
/**/prep11.close();
2022-07-18 10:50:13 jdbc[16]: 
/**/Statement stat2 = conn13.createStatement();
2022-07-18 10:50:13 jdbc[16]: 
/**/ResultSet rs128 = stat2.executeQuery("SELECT SEQUENCE_NAME, BASE_VALUE, INCREMENT FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME");
2022-07-18 10:50:13 jdbc[16]: Plan       : calculate cost for plan [SEQUENCES:-16:org.h2.table.InformationSchemaTable@4ef31221]
2022-07-18 10:50:13 jdbc[16]: Plan       :   for table filter SEQUENCES:-16:org.h2.table.InformationSchemaTable@4ef31221
2022-07-18 10:50:13 jdbc[16]: Table      :     potential plan item cost 10 000 index meta
2022-07-18 10:50:13 jdbc[16]: Table      :     potential plan item cost 4 322 index meta
2022-07-18 10:50:13 jdbc[16]: Plan       :   best plan item cost 4 322 index meta
2022-07-18 10:50:13 jdbc[16]: Plan       : plan cost 4 323
2022-07-18 10:50:13 jdbc[16]: 
/*SQL #:1*/SELECT SEQUENCE_NAME, BASE_VALUE, INCREMENT FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME;
2022-07-18 10:50:13 jdbc[16]: 
/**/rs128.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs128.getString(1);
2022-07-18 10:50:13 jdbc[16]: 
/**/rs128.getString(2);
2022-07-18 10:50:13 jdbc[16]: 
/**/rs128.getString(3);
2022-07-18 10:50:13 jdbc[16]: 
/**/rs128.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs128.close();
2022-07-18 10:50:13 jdbc[16]: 
/**/ResultSet rs129 = stat2.executeQuery("SELECT USER_NAME, IS_ADMIN FROM INFORMATION_SCHEMA.USERS ORDER BY USER_NAME");
2022-07-18 10:50:13 jdbc[16]: Plan       : calculate cost for plan [USERS:-35:org.h2.table.InformationSchemaTable@3da0df34]
2022-07-18 10:50:13 jdbc[16]: Plan       :   for table filter USERS:-35:org.h2.table.InformationSchemaTable@3da0df34
2022-07-18 10:50:13 jdbc[16]: Table      :     potential plan item cost 10 000 index meta
2022-07-18 10:50:13 jdbc[16]: Plan       :   best plan item cost 10 000 index meta
2022-07-18 10:50:13 jdbc[16]: Plan       : plan cost 10 001
2022-07-18 10:50:13 jdbc[16]: 
/*SQL #:1*/SELECT USER_NAME, IS_ADMIN FROM INFORMATION_SCHEMA.USERS ORDER BY USER_NAME;
2022-07-18 10:50:13 jdbc[16]: 
/**/rs129.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs129.getString(1);
2022-07-18 10:50:13 jdbc[16]: 
/**/rs129.getString(2);
2022-07-18 10:50:13 jdbc[16]: 
/**/rs129.next();
2022-07-18 10:50:13 jdbc[16]: 
/**/rs129.close();
2022-07-18 10:50:13 jdbc[16]: 
/**/stat2.close();
2022-07-18 10:50:13 jdbc[16]: 
/**/dbMeta6.getDatabaseProductName();
2022-07-18 10:50:13 jdbc[16]: 
/**/dbMeta6.getDatabaseProductVersion();
2022-07-18 10:50:20 jdbc[16]: 
/**/conn13.close();
2022-07-18 10:50:20 lock: 16 shared read unlock SYS 
2022-07-18 10:50:20 database: disconnecting session #16
2022-07-18 10:50:20 database: disconnected session #16
2022-07-18 10:51:21 database: connecting session #17 to C:/Users/User/IdeaProjects/Questionnaire/database
2022-07-18 10:51:21 jdbc[17]: 
/**/Connection conn14 = DriverManager.getConnection("jdbc:h2:file:./database", "DEN", "");
2022-07-18 10:51:21 lock: 14 shared read unlock SYS 
2022-07-18 10:51:21 database: disconnecting session #14
2022-07-18 10:51:21 database: disconnected session #14
2022-07-18 10:51:21 jdbc[17]: null
org.h2.message.DbException: Незакрытое приложением соединение уничтожено сборщиком мусора
The connection was not closed by the application and is garbage collected [90018-214]
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.closeOld(JdbcConnection.java:190)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:132)
	at org.h2.util.JdbcUtils.getConnection(JdbcUtils.java:288)
	at org.h2.server.web.WebServer.getConnection(WebServer.java:808)
	at org.h2.server.web.WebApp.test(WebApp.java:972)
	at org.h2.server.web.WebApp.process(WebApp.java:241)
	at org.h2.server.web.WebApp.processRequest(WebApp.java:176)
	at org.h2.server.web.WebServlet.doGet(WebServlet.java:129)
	at org.h2.server.web.WebServlet.doPost(WebServlet.java:166)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.h2.jdbc.JdbcSQLNonTransientConnectionException: Незакрытое приложением соединение уничтожено сборщиком мусора
The connection was not closed by the application and is garbage collected [90018-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	... 47 more
2022-07-18 10:51:21 jdbc[17]: 
/**/conn14.close();
2022-07-18 10:51:21 lock: 17 shared read unlock SYS 
2022-07-18 10:51:21 database: disconnecting session #17
2022-07-18 10:51:21 database: disconnected session #17
2022-07-18 10:51:25 database: connecting session #18 to C:/Users/User/IdeaProjects/Questionnaire/database
2022-07-18 10:51:25 jdbc[18]: 
/**/Connection conn15 = DriverManager.getConnection("jdbc:h2:file:./database", "DEN", "");
2022-07-18 10:51:25 jdbc[18]: 
/**/DatabaseMetaData dbMeta8 = conn15.getMetaData();
2022-07-18 10:51:25 jdbc[18]: 
/**/DatabaseMetaData dbMeta9 = conn15.getMetaData();
2022-07-18 10:51:25 jdbc[18]: 
/**/dbMeta9.storesLowerCaseIdentifiers();
2022-07-18 10:51:25 jdbc[18]: 
/**/dbMeta9.getSchemas();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs130.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs130.getString("TABLE_SCHEM");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs130.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs130.getString("TABLE_SCHEM");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs130.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs130.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/dbMeta9.getTables(null, "INFORMATION_SCHEMA", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs131.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/dbMeta9.getConnection();
2022-07-18 10:51:25 jdbc[18]: 
/**/PreparedStatement prep12 = conn15.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2");
2022-07-18 10:51:25 jdbc[18]: Plan       : calculate cost for plan [COLUMNS:-4:org.h2.table.InformationSchemaTable@363207b]
2022-07-18 10:51:25 jdbc[18]: Plan       :   for table filter COLUMNS:-4:org.h2.table.InformationSchemaTable@363207b
2022-07-18 10:51:25 jdbc[18]: Table      :     potential plan item cost 10 000 index meta
2022-07-18 10:51:25 jdbc[18]: Table      :     potential plan item cost 28 index meta
2022-07-18 10:51:25 jdbc[18]: Plan       :   best plan item cost 27,44 index meta
2022-07-18 10:51:25 jdbc[18]: Plan       : plan cost 28,44
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "CONSTANTS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs132 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:27*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'CONSTANTS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs132.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "ENUM_VALUES");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs133 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ENUM_VALUES'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs133.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "INDEXES");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs134 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:10*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'INDEXES'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs134.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "INDEX_COLUMNS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs135 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:11*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'INDEX_COLUMNS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs135.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "INFORMATION_SCHEMA_CATALOG_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs136 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:1*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'INFORMATION_SCHEMA_CATALOG_NAME'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs136.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs136.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs136.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs136.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs136.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs136.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "IN_DOUBT");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs137 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'IN_DOUBT'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs137.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs137.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs137.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs137.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs137.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs137.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs137.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs137.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs137.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs137.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "LOCKS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs138 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'LOCKS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs138.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "QUERY_STATISTICS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs139 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'QUERY_STATISTICS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs139.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "RIGHTS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs140 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:6*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'RIGHTS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs140.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "ROLES");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs141 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ROLES'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs141.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs141.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs141.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs141.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs141.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs141.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs141.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs141.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs141.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs141.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "SESSIONS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs142 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:13*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SESSIONS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs142.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "SESSION_STATE");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs143 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SESSION_STATE'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs143.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs143.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs143.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs143.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs143.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs143.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs143.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs143.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs143.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs143.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "SETTINGS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs144 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SETTINGS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs144.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs144.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs144.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs144.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs144.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs144.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs144.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs144.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs144.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs144.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "SYNONYMS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs145 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SYNONYMS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs145.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "USERS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs146 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'USERS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs146.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs146.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs146.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs146.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs146.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs146.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs146.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs146.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs146.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs146.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs146.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs146.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs146.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs146.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "CHECK_CONSTRAINTS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs147 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:4*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'CHECK_CONSTRAINTS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs147.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "COLLATIONS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs148 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:5*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'COLLATIONS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs148.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "COLUMNS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs149 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:48*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'COLUMNS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs149.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "COLUMN_PRIVILEGES");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs150 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'COLUMN_PRIVILEGES'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs150.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "CONSTRAINT_COLUMN_USAGE");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs151 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:7*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'CONSTRAINT_COLUMN_USAGE'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs151.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "DOMAINS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs152 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:31*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'DOMAINS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs152.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "DOMAIN_CONSTRAINTS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs153 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'DOMAIN_CONSTRAINTS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs153.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "ELEMENT_TYPES");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs154 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:27*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ELEMENT_TYPES'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs154.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "FIELDS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs155 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:29*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'FIELDS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs155.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "KEY_COLUMN_USAGE");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs156 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'KEY_COLUMN_USAGE'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs156.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "PARAMETERS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs157 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:31*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'PARAMETERS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs157.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "REFERENTIAL_CONSTRAINTS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs158 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'REFERENTIAL_CONSTRAINTS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs158.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "ROUTINES");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs159 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:36*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'ROUTINES'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs159.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "SCHEMATA");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs160 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:9*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SCHEMATA'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs160.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "SEQUENCES");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs161 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:18*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'SEQUENCES'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs161.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "TABLES");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs162 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:11*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TABLES'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs162.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "TABLE_CONSTRAINTS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs163 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TABLE_CONSTRAINTS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs163.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "TABLE_PRIVILEGES");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs164 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:8*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TABLE_PRIVILEGES'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs164.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "TRIGGERS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs165 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:14*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'TRIGGERS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs165.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(1, "INFORMATION_SCHEMA");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.setString(2, "VIEWS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs166 = prep12.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:12*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'INFORMATION_SCHEMA', 2: 'VIEWS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs166.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep12.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/dbMeta9.getProcedures(null, "INFORMATION_SCHEMA", null);
2022-07-18 10:51:25 jdbc[18]: 
/**/rs167.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs167.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/dbMeta9.getTables(null, "PUBLIC", null, new String[]{"TABLE", "SYSTEM TABLE", "VIEW", "SYSTEM VIEW", "TABLE LINK", "SYNONYM", "EXTERNAL"});
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.getString("TABLE_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.getString("TABLE_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs168.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/dbMeta9.getConnection();
2022-07-18 10:51:25 jdbc[18]: 
/**/PreparedStatement prep13 = conn15.prepareStatement("SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep13.setString(1, "PUBLIC");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep13.setString(2, "CUSTOMER");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs169 = prep13.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:6*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'CUSTOMER'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs169.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep13.setString(1, "PUBLIC");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep13.setString(2, "CUSTOMER_QUESTIONNAIRES");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs170 = prep13.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'CUSTOMER_QUESTIONNAIRES'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs170.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs170.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs170.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs170.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs170.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs170.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs170.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs170.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs170.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs170.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep13.setString(1, "PUBLIC");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep13.setString(2, "QUESTION");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs171 = prep13.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:3*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'QUESTION'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs171.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs171.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs171.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs171.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs171.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs171.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs171.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs171.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs171.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs171.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs171.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs171.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs171.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs171.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep13.setString(1, "PUBLIC");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep13.setString(2, "QUESTIONNAIRE");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs172 = prep13.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'QUESTIONNAIRE'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs172.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs172.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs172.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs172.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs172.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs172.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs172.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs172.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs172.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs172.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep13.setString(1, "PUBLIC");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep13.setString(2, "QUESTIONNAIRE_QUESTIONS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs173 = prep13.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'QUESTIONNAIRE_QUESTIONS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs173.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs173.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs173.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs173.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs173.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs173.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs173.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs173.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs173.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs173.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep13.setString(1, "PUBLIC");
2022-07-18 10:51:25 jdbc[18]: 
/**/prep13.setString(2, "QUESTION_ANSWERS");
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs174 = prep13.executeQuery();
2022-07-18 10:51:25 jdbc[18]: 
/*SQL l:174 #:2*/SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE_SQL(?1, ?2, 'TABLE', ORDINAL_POSITION) COLUMN_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ?1 AND TABLE_NAME = ?2 {1: 'PUBLIC', 2: 'QUESTION_ANSWERS'};
2022-07-18 10:51:25 jdbc[18]: 
/**/rs174.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs174.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs174.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs174.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs174.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs174.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs174.getInt("ORDINAL_POSITION");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs174.getString("COLUMN_TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs174.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs174.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep13.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/dbMeta9.getProcedures(null, "PUBLIC", null);
2022-07-18 10:51:25 jdbc[18]: 
/**/rs175.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs175.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/PreparedStatement prep14 = conn15.prepareStatement("SELECT VIEW_DEFINITION FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?");
2022-07-18 10:51:25 jdbc[18]: Plan       : calculate cost for plan [VIEWS:-21:org.h2.table.InformationSchemaTable@133d3768]
2022-07-18 10:51:25 jdbc[18]: Plan       :   for table filter VIEWS:-21:org.h2.table.InformationSchemaTable@133d3768
2022-07-18 10:51:25 jdbc[18]: Table      :     potential plan item cost 10 000 index meta
2022-07-18 10:51:25 jdbc[18]: Table      :     potential plan item cost 28 index meta
2022-07-18 10:51:25 jdbc[18]: Plan       :   best plan item cost 27,44 index meta
2022-07-18 10:51:25 jdbc[18]: Plan       : plan cost 28,44
2022-07-18 10:51:25 jdbc[18]: 
/**/prep14.setString(1, "PUBLIC");
2022-07-18 10:51:25 jdbc[18]: 
/**/dbMeta8.getIndexInfo(null, "PUBLIC", "CUSTOMER", false, true);
2022-07-18 10:51:25 jdbc[18]: 
/**/rs176.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs176.getString("INDEX_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs176.getInt("TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs176.getBoolean("NON_UNIQUE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs176.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs176.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs176.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/dbMeta8.getIndexInfo(null, "PUBLIC", "CUSTOMER_QUESTIONNAIRES", false, true);
2022-07-18 10:51:25 jdbc[18]: 
/**/rs177.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs177.getString("INDEX_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs177.getInt("TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs177.getBoolean("NON_UNIQUE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs177.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs177.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs177.getString("INDEX_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs177.getInt("TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs177.getBoolean("NON_UNIQUE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs177.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs177.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs177.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/dbMeta8.getIndexInfo(null, "PUBLIC", "QUESTION", false, true);
2022-07-18 10:51:25 jdbc[18]: 
/**/rs178.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs178.getString("INDEX_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs178.getInt("TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs178.getBoolean("NON_UNIQUE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs178.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs178.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs178.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/dbMeta8.getIndexInfo(null, "PUBLIC", "QUESTIONNAIRE", false, true);
2022-07-18 10:51:25 jdbc[18]: 
/**/rs179.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs179.getString("INDEX_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs179.getInt("TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs179.getBoolean("NON_UNIQUE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs179.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs179.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs179.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/dbMeta8.getIndexInfo(null, "PUBLIC", "QUESTIONNAIRE_QUESTIONS", false, true);
2022-07-18 10:51:25 jdbc[18]: 
/**/rs180.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs180.getString("INDEX_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs180.getInt("TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs180.getBoolean("NON_UNIQUE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs180.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs180.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs180.getString("INDEX_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs180.getInt("TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs180.getBoolean("NON_UNIQUE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs180.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs180.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs180.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/dbMeta8.getIndexInfo(null, "PUBLIC", "QUESTION_ANSWERS", false, true);
2022-07-18 10:51:25 jdbc[18]: 
/**/rs181.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs181.getString("INDEX_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs181.getInt("TYPE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs181.getBoolean("NON_UNIQUE");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs181.getString("COLUMN_NAME");
2022-07-18 10:51:25 jdbc[18]: 
/**/rs181.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs181.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/prep14.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/Statement stat3 = conn15.createStatement();
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs182 = stat3.executeQuery("SELECT SEQUENCE_NAME, BASE_VALUE, INCREMENT FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME");
2022-07-18 10:51:25 jdbc[18]: Plan       : calculate cost for plan [SEQUENCES:-16:org.h2.table.InformationSchemaTable@4ef31221]
2022-07-18 10:51:25 jdbc[18]: Plan       :   for table filter SEQUENCES:-16:org.h2.table.InformationSchemaTable@4ef31221
2022-07-18 10:51:25 jdbc[18]: Table      :     potential plan item cost 10 000 index meta
2022-07-18 10:51:25 jdbc[18]: Table      :     potential plan item cost 4 322 index meta
2022-07-18 10:51:25 jdbc[18]: Plan       :   best plan item cost 4 322 index meta
2022-07-18 10:51:25 jdbc[18]: Plan       : plan cost 4 323
2022-07-18 10:51:25 jdbc[18]: 
/*SQL #:1*/SELECT SEQUENCE_NAME, BASE_VALUE, INCREMENT FROM INFORMATION_SCHEMA.SEQUENCES ORDER BY SEQUENCE_NAME;
2022-07-18 10:51:25 jdbc[18]: 
/**/rs182.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs182.getString(1);
2022-07-18 10:51:25 jdbc[18]: 
/**/rs182.getString(2);
2022-07-18 10:51:25 jdbc[18]: 
/**/rs182.getString(3);
2022-07-18 10:51:25 jdbc[18]: 
/**/rs182.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs182.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/ResultSet rs183 = stat3.executeQuery("SELECT USER_NAME, IS_ADMIN FROM INFORMATION_SCHEMA.USERS ORDER BY USER_NAME");
2022-07-18 10:51:25 jdbc[18]: Plan       : calculate cost for plan [USERS:-35:org.h2.table.InformationSchemaTable@3da0df34]
2022-07-18 10:51:25 jdbc[18]: Plan       :   for table filter USERS:-35:org.h2.table.InformationSchemaTable@3da0df34
2022-07-18 10:51:25 jdbc[18]: Table      :     potential plan item cost 10 000 index meta
2022-07-18 10:51:25 jdbc[18]: Plan       :   best plan item cost 10 000 index meta
2022-07-18 10:51:25 jdbc[18]: Plan       : plan cost 10 001
2022-07-18 10:51:25 jdbc[18]: 
/*SQL #:1*/SELECT USER_NAME, IS_ADMIN FROM INFORMATION_SCHEMA.USERS ORDER BY USER_NAME;
2022-07-18 10:51:25 jdbc[18]: 
/**/rs183.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs183.getString(1);
2022-07-18 10:51:25 jdbc[18]: 
/**/rs183.getString(2);
2022-07-18 10:51:25 jdbc[18]: 
/**/rs183.next();
2022-07-18 10:51:25 jdbc[18]: 
/**/rs183.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/stat3.close();
2022-07-18 10:51:25 jdbc[18]: 
/**/dbMeta8.getDatabaseProductName();
2022-07-18 10:51:25 jdbc[18]: 
/**/dbMeta8.getDatabaseProductVersion();
2022-07-18 10:51:30 jdbc[18]: 
/**/Statement stat4 = conn15.createStatement(1004, 1008);
2022-07-18 10:51:30 jdbc[18]: 
/**/stat4.setMaxRows(1000);
2022-07-18 10:51:30 jdbc[18]: 
/**/stat4.execute("SELECT * FROM CUSTOMER");
2022-07-18 10:51:30 jdbc[18]: Plan       : calculate cost for plan [PUBLIC.CUSTOMER]
2022-07-18 10:51:30 jdbc[18]: Plan       :   for table filter PUBLIC.CUSTOMER
2022-07-18 10:51:30 jdbc[18]: Table      :     potential plan item cost 10 230 index PUBLIC.CUSTOMER.tableScan
2022-07-18 10:51:30 jdbc[18]: Table      :     potential plan item cost 10 240 index PUBLIC.PRIMARY_KEY_A
2022-07-18 10:51:30 jdbc[18]: Plan       :   best plan item cost 10 230 index PUBLIC.CUSTOMER.tableScan
2022-07-18 10:51:30 jdbc[18]: Plan       : plan cost 10 231
2022-07-18 10:51:30 jdbc[18]: 
/*SQL #:3*/SELECT * FROM CUSTOMER;
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSet rs184 = stat4.getResultSet();
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta5 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/*SQL #:1*/CALL DATABASE();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta5.getColumnCount();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta5.getColumnLabel(1);
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta5.getColumnLabel(2);
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta5.getColumnLabel(3);
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta5.getColumnLabel(4);
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta5.getColumnLabel(5);
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta5.getColumnLabel(6);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta6 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta6.getColumnType(1);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(1);
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta7 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta7.getColumnType(2);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(2);
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta8 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta8.getColumnType(3);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(3);
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta9 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta9.getColumnType(4);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(4);
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta10 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta10.getColumnType(5);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(5);
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta11 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta11.getColumnType(6);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(6);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta12 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta12.getColumnType(1);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(1);
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta13 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta13.getColumnType(2);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(2);
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta14 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta14.getColumnType(3);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(3);
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta15 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta15.getColumnType(4);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(4);
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta16 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta16.getColumnType(5);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(5);
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta17 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta17.getColumnType(6);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(6);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta18 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta18.getColumnType(1);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(1);
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta19 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta19.getColumnType(2);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(2);
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta20 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta20.getColumnType(3);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(3);
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta21 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta21.getColumnType(4);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(4);
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta22 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta22.getColumnType(5);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(5);
2022-07-18 10:51:30 jdbc[18]: 
/**/ResultSetMetaData rsMeta23 = rs184.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/conn15.getCatalog();
2022-07-18 10:51:30 jdbc[18]: 
/**/rsMeta23.getColumnType(6);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getString(6);
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.next();
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getConcurrency();
2022-07-18 10:51:30 jdbc[18]: 
/**/DatabaseMetaData dbMeta10 = conn15.getMetaData();
2022-07-18 10:51:30 jdbc[18]: 
/**/dbMeta10.getTables(null, "PUBLIC", "CUSTOMER", new String[]{"BASE TABLE"});
2022-07-18 10:51:30 jdbc[18]: 
/**/rs185.next();
2022-07-18 10:51:30 jdbc[18]: 
/**/rs185.getString("TABLE_NAME");
2022-07-18 10:51:30 jdbc[18]: 
/**/dbMeta10.getPrimaryKeys(null, "PUBLIC", "CUSTOMER");
2022-07-18 10:51:30 jdbc[18]: 
/**/rs186.next();
2022-07-18 10:51:30 jdbc[18]: 
/**/rs186.getString("COLUMN_NAME");
2022-07-18 10:51:30 jdbc[18]: 
/**/rs186.next();
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.getType();
2022-07-18 10:51:30 jdbc[18]: 
/**/rs184.close();
2022-07-18 10:51:30 jdbc[18]: 
/**/stat4.close();
2022-07-18 10:53:49 database: closing C:/Users/User/IdeaProjects/Questionnaire/database from shutdown hook
2022-07-18 10:53:49 lock: 18 shared read unlock SYS 
2022-07-18 10:53:49 database: disconnecting session #18
2022-07-18 10:53:49 database: disconnected session #18
2022-07-18 10:53:49 lock: 3 shared read unlock SYS 
2022-07-18 10:53:49 database: disconnecting session #3
2022-07-18 10:53:49 database: disconnected session #3
2022-07-18 10:53:49 lock: 4 shared read unlock SYS 
2022-07-18 10:53:49 database: disconnecting session #4
2022-07-18 10:53:49 database: disconnected session #4
2022-07-18 10:53:49 lock: 5 shared read unlock SYS 
2022-07-18 10:53:49 database: disconnecting session #5
2022-07-18 10:53:49 database: disconnected session #5
2022-07-18 10:53:49 lock: 6 shared read unlock SYS 
2022-07-18 10:53:49 database: disconnecting session #6
2022-07-18 10:53:49 database: disconnected session #6
2022-07-18 10:53:49 lock: 7 shared read unlock SYS 
2022-07-18 10:53:49 database: disconnecting session #7
2022-07-18 10:53:49 database: disconnected session #7
2022-07-18 10:53:49 lock: 8 shared read unlock SYS 
2022-07-18 10:53:49 database: disconnecting session #8
2022-07-18 10:53:49 database: disconnected session #8
2022-07-18 10:53:49 lock: 9 shared read unlock SYS 
2022-07-18 10:53:49 database: disconnecting session #9
2022-07-18 10:53:49 database: disconnected session #9
2022-07-18 10:53:49 lock: 10 shared read unlock SYS 
2022-07-18 10:53:49 database: disconnecting session #10
2022-07-18 10:53:49 database: disconnected session #10
2022-07-18 10:53:49 lock: 11 shared read unlock SYS 
2022-07-18 10:53:49 database: disconnecting session #11
2022-07-18 10:53:49 database: disconnected session #11
2022-07-18 10:53:49 lock: 12 shared read unlock SYS 
2022-07-18 10:53:49 database: disconnecting session #12
2022-07-18 10:53:49 database: disconnected session #12
2022-07-18 10:53:49 jdbc[18]: 
/**/conn15.close();
2022-07-18 10:53:49 jdbc[3]: 
/**/conn0.close();
2022-07-18 10:53:49 jdbc[4]: 
/**/conn1.close();
2022-07-18 10:53:49 jdbc[5]: 
/**/conn2.close();
2022-07-18 10:53:49 jdbc[6]: 
/**/conn3.close();
2022-07-18 10:53:49 jdbc[7]: 
/**/conn4.close();
2022-07-18 10:53:49 jdbc[8]: 
/**/conn5.close();
2022-07-18 10:53:49 jdbc[9]: 
/**/conn6.close();
2022-07-18 10:53:49 jdbc[10]: 
/**/conn7.close();
2022-07-18 10:53:49 jdbc[11]: 
/**/conn8.close();
2022-07-18 10:53:49 jdbc[12]: 
/**/conn9.close();
2022-07-18 10:53:49 database: closing C:/Users/User/IdeaProjects/Questionnaire/database
2022-07-18 10:53:49 lock: 2 shared read unlock SYS 
2022-07-18 10:53:49 lock: 1 shared read unlock SYS 
2022-07-18 10:53:49 database: closed
2022-07-20 08:10:50 database: disconnecting session #15
2022-07-20 08:10:50 database: disconnected session #15
2022-07-20 08:10:51 database: connecting session #16 to C:/Users/User/IdeaProjects/Questionnaire/database
2022-07-20 08:11:51 jdbc[3]: 
/*SQL #:2*/select questionna0_.id as id1_4_, questionna0_.title as title2_4_ from questionnaire questionna0_;
2022-07-20 08:11:51 jdbc[3]: 
/*SQL l:356 #:1*/select questions0_.questionnaire_id as question1_5_0_, questions0_.questions_id as question2_5_0_, question1_.id as id1_2_1_, question1_.question as question2_2_1_, question1_.true_answer as true_ans3_2_1_ from questionnaire_questions questions0_ inner join question question1_ on questions0_.questions_id=question1_.id where questions0_.questionnaire_id=? {1: CAST(3 AS BIGINT)};
2022-07-20 08:11:51 jdbc[3]: 
/*SQL l:356 #:2*/select questions0_.questionnaire_id as question1_5_0_, questions0_.questions_id as question2_5_0_, question1_.id as id1_2_1_, question1_.question as question2_2_1_, question1_.true_answer as true_ans3_2_1_ from questionnaire_questions questions0_ inner join question question1_ on questions0_.questions_id=question1_.id where questions0_.questionnaire_id=? {1: CAST(2 AS BIGINT)};
2022-07-20 08:11:51 jdbc[3]: 
/*SQL */COMMIT;
2022-07-20 08:11:51 jdbc[3]: 
/*SQL */COMMIT;
2022-07-20 08:11:51 jdbc[3]: 
/*SQL l:144*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(13 AS BIGINT)};
2022-07-20 08:11:51 jdbc[3]: 
/*SQL l:144 #:3*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(15 AS BIGINT)};
2022-07-20 08:11:51 jdbc[3]: 
/*SQL l:144 #:2*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(30 AS BIGINT)};
2022-07-20 08:13:38 jdbc[3]: 
/*SQL #:1*/call next value for hibernate_sequence;
2022-07-20 08:13:38 jdbc[3]: 
/*SQL l:65 #:1 t:1*/insert into question (question, true_answer, id) values (?, ?, ?) {1: U&'\\0412\\0435\\0434\\0443\\0449\\0430\\044f IT-\\043a\\043e\\043c\\043f\\0430\\043d\\0438\\044f \\0421\\0430\\043c\\0430\\0440\\044b', 2: U&'\\041e\\043f\\0435\\043d\\041a\\043e\\0434', 3: CAST(31 AS BIGINT)};
2022-07-20 08:13:38 jdbc[3]: 
/*SQL l:65 #:1*/insert into question_answers (question_id, answers) values (?, ?) {1: CAST(31 AS BIGINT), 2: U&'\\0413\\0430\\0437\\043f\\0440\\043e\\043c'};
2022-07-20 08:13:38 jdbc[3]: 
/*SQL l:65 #:1*/insert into question_answers (question_id, answers) values (?, ?) {1: CAST(31 AS BIGINT), 2: U&'\\041e\\043f\\0435\\043d\\041a\\043e\\0434'};
2022-07-20 08:13:38 jdbc[3]: 
/*SQL l:65 #:1*/insert into question_answers (question_id, answers) values (?, ?) {1: CAST(31 AS BIGINT), 2: U&'\\0421\\0430\\043c\\0430\\0440\\0430IT'};
2022-07-20 08:13:38 jdbc[3]: 
/*SQL */COMMIT;
2022-07-20 08:13:38 jdbc[3]: 
/*SQL */COMMIT;
2022-07-20 08:13:38 jdbc[3]: 
/*SQL l:129 #:1*/select questionna0_.id as id1_4_, questionna0_.title as title2_4_ from questionnaire questionna0_ where questionna0_.id=? limit ? {1: CAST(3 AS BIGINT), 2: 1};
2022-07-20 08:13:38 jdbc[3]: 
/*SQL l:356 #:1*/select questions0_.questionnaire_id as question1_5_0_, questions0_.questions_id as question2_5_0_, question1_.id as id1_2_1_, question1_.question as question2_2_1_, question1_.true_answer as true_ans3_2_1_ from questionnaire_questions questions0_ inner join question question1_ on questions0_.questions_id=question1_.id where questions0_.questionnaire_id=? {1: CAST(3 AS BIGINT)};
2022-07-20 08:13:38 jdbc[3]: 
/*SQL l:60 #:1*/delete from questionnaire_questions where questionnaire_id=? {1: CAST(3 AS BIGINT)};
2022-07-20 08:13:38 jdbc[3]: 
/*SQL l:82 #:1*/insert into questionnaire_questions (questionnaire_id, questions_id) values (?, ?) {1: CAST(3 AS BIGINT), 2: CAST(30 AS BIGINT)};
2022-07-20 08:13:38 jdbc[3]: 
/*SQL l:82 #:1*/insert into questionnaire_questions (questionnaire_id, questions_id) values (?, ?) {1: CAST(3 AS BIGINT), 2: CAST(31 AS BIGINT)};
2022-07-20 08:13:38 jdbc[3]: 
/*SQL */COMMIT;
2022-07-20 08:13:38 jdbc[3]: 
/*SQL */COMMIT;
2022-07-20 08:13:38 jdbc[3]: 
/*SQL l:144 #:2*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(30 AS BIGINT)};
2022-07-20 08:14:53 jdbc[3]: 
/*SQL l:248 #:1*/select customer0_.id as id1_0_, customer0_.created_date as created_2_0_, customer0_.email as email3_0_, customer0_.name as name4_0_, customer0_.points as points5_0_, customer0_.role as role6_0_ from customer customer0_ where customer0_.id=? limit ? {1: CAST(29 AS BIGINT), 2: 1};
2022-07-20 08:14:53 jdbc[3]: 
/*SQL l:326*/select questionna0_.customer_id as customer1_1_0_, questionna0_.questionnaires_id as question2_1_0_, questionna1_.id as id1_4_1_, questionna1_.title as title2_4_1_ from customer_questionnaires questionna0_ inner join questionnaire questionna1_ on questionna0_.questionnaires_id=questionna1_.id where questionna0_.customer_id=? {1: CAST(29 AS BIGINT)};
2022-07-20 08:14:53 jdbc[3]: 
/*SQL l:248 #:1*/select customer0_.id as id1_0_, customer0_.created_date as created_2_0_, customer0_.email as email3_0_, customer0_.name as name4_0_, customer0_.points as points5_0_, customer0_.role as role6_0_ from customer customer0_ where customer0_.id=? limit ? {1: CAST(29 AS BIGINT), 2: 1};
2022-07-20 08:14:53 jdbc[3]: 
/*SQL l:326*/select questionna0_.customer_id as customer1_1_0_, questionna0_.questionnaires_id as question2_1_0_, questionna1_.id as id1_4_1_, questionna1_.title as title2_4_1_ from customer_questionnaires questionna0_ inner join questionnaire questionna1_ on questionna0_.questionnaires_id=questionna1_.id where questionna0_.customer_id=? {1: CAST(29 AS BIGINT)};
2022-07-20 08:14:53 jdbc[3]: 
/*SQL l:248 #:1*/select customer0_.id as id1_0_, customer0_.created_date as created_2_0_, customer0_.email as email3_0_, customer0_.name as name4_0_, customer0_.points as points5_0_, customer0_.role as role6_0_ from customer customer0_ where customer0_.id=? limit ? {1: CAST(29 AS BIGINT), 2: 1};
2022-07-20 08:14:53 jdbc[3]: 
/*SQL l:326*/select questionna0_.customer_id as customer1_1_0_, questionna0_.questionnaires_id as question2_1_0_, questionna1_.id as id1_4_1_, questionna1_.title as title2_4_1_ from customer_questionnaires questionna0_ inner join questionnaire questionna1_ on questionna0_.questionnaires_id=questionna1_.id where questionna0_.customer_id=? {1: CAST(29 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL #:2*/select questionna0_.id as id1_4_, questionna0_.title as title2_4_ from questionnaire questionna0_;
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:356 #:2*/select questions0_.questionnaire_id as question1_5_0_, questions0_.questions_id as question2_5_0_, question1_.id as id1_2_1_, question1_.question as question2_2_1_, question1_.true_answer as true_ans3_2_1_ from questionnaire_questions questions0_ inner join question question1_ on questions0_.questions_id=question1_.id where questions0_.questionnaire_id=? {1: CAST(3 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:356 #:2*/select questions0_.questionnaire_id as question1_5_0_, questions0_.questions_id as question2_5_0_, question1_.id as id1_2_1_, question1_.question as question2_2_1_, question1_.true_answer as true_ans3_2_1_ from questionnaire_questions questions0_ inner join question question1_ on questions0_.questions_id=question1_.id where questions0_.questionnaire_id=? {1: CAST(2 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL */COMMIT;
2022-07-20 08:14:54 jdbc[3]: 
/*SQL */COMMIT;
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:144*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(13 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:144 #:3*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(15 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:144 #:2*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(30 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:144 #:3*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(31 AS BIGINT)};
2022-07-20 08:14:54 jdbc[4]: 
/*SQL l:248 #:1*/select customer0_.id as id1_0_, customer0_.created_date as created_2_0_, customer0_.email as email3_0_, customer0_.name as name4_0_, customer0_.points as points5_0_, customer0_.role as role6_0_ from customer customer0_ where customer0_.id=? limit ? {1: CAST(29 AS BIGINT), 2: 1};
2022-07-20 08:14:54 jdbc[4]: 
/*SQL l:74 #:1*/SELECT SETTING_VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE SETTING_NAME=? {1: 'QUERY_TIMEOUT'};
2022-07-20 08:14:54 jdbc[4]: 
/*SQL l:326*/select questionna0_.customer_id as customer1_1_0_, questionna0_.questionnaires_id as question2_1_0_, questionna1_.id as id1_4_1_, questionna1_.title as title2_4_1_ from customer_questionnaires questionna0_ inner join questionnaire questionna1_ on questionna0_.questionnaires_id=questionna1_.id where questionna0_.customer_id=? {1: CAST(29 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL #:2*/select questionna0_.id as id1_4_, questionna0_.title as title2_4_ from questionnaire questionna0_;
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:356 #:2*/select questions0_.questionnaire_id as question1_5_0_, questions0_.questions_id as question2_5_0_, question1_.id as id1_2_1_, question1_.question as question2_2_1_, question1_.true_answer as true_ans3_2_1_ from questionnaire_questions questions0_ inner join question question1_ on questions0_.questions_id=question1_.id where questions0_.questionnaire_id=? {1: CAST(3 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:356 #:2*/select questions0_.questionnaire_id as question1_5_0_, questions0_.questions_id as question2_5_0_, question1_.id as id1_2_1_, question1_.question as question2_2_1_, question1_.true_answer as true_ans3_2_1_ from questionnaire_questions questions0_ inner join question question1_ on questions0_.questions_id=question1_.id where questions0_.questionnaire_id=? {1: CAST(2 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL */COMMIT;
2022-07-20 08:14:54 jdbc[3]: 
/*SQL */COMMIT;
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:144*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(13 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:144 #:3*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(15 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:144 #:2*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(30 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:144 #:3*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(31 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL #:2*/select questionna0_.id as id1_4_, questionna0_.title as title2_4_ from questionnaire questionna0_;
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:356 #:2*/select questions0_.questionnaire_id as question1_5_0_, questions0_.questions_id as question2_5_0_, question1_.id as id1_2_1_, question1_.question as question2_2_1_, question1_.true_answer as true_ans3_2_1_ from questionnaire_questions questions0_ inner join question question1_ on questions0_.questions_id=question1_.id where questions0_.questionnaire_id=? {1: CAST(3 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:356 #:2*/select questions0_.questionnaire_id as question1_5_0_, questions0_.questions_id as question2_5_0_, question1_.id as id1_2_1_, question1_.question as question2_2_1_, question1_.true_answer as true_ans3_2_1_ from questionnaire_questions questions0_ inner join question question1_ on questions0_.questions_id=question1_.id where questions0_.questionnaire_id=? {1: CAST(2 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL */COMMIT;
2022-07-20 08:14:54 jdbc[3]: 
/*SQL */COMMIT;
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:144*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(13 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:144 #:3*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(15 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:144 #:2*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(30 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:144 #:3*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(31 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL #:2*/select questionna0_.id as id1_4_, questionna0_.title as title2_4_ from questionnaire questionna0_;
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:356 #:2*/select questions0_.questionnaire_id as question1_5_0_, questions0_.questions_id as question2_5_0_, question1_.id as id1_2_1_, question1_.question as question2_2_1_, question1_.true_answer as true_ans3_2_1_ from questionnaire_questions questions0_ inner join question question1_ on questions0_.questions_id=question1_.id where questions0_.questionnaire_id=? {1: CAST(3 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:356 #:2*/select questions0_.questionnaire_id as question1_5_0_, questions0_.questions_id as question2_5_0_, question1_.id as id1_2_1_, question1_.question as question2_2_1_, question1_.true_answer as true_ans3_2_1_ from questionnaire_questions questions0_ inner join question question1_ on questions0_.questions_id=question1_.id where questions0_.questionnaire_id=? {1: CAST(2 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL */COMMIT;
2022-07-20 08:14:54 jdbc[3]: 
/*SQL */COMMIT;
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:144*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(13 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:144 #:3*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(15 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:144 #:2*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(30 AS BIGINT)};
2022-07-20 08:14:54 jdbc[3]: 
/*SQL l:144 #:3*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(31 AS BIGINT)};
2022-07-20 08:14:59 jdbc[3]: 
/*SQL l:129 #:1*/select questionna0_.id as id1_4_, questionna0_.title as title2_4_ from questionnaire questionna0_ where questionna0_.id=? limit ? {1: CAST(3 AS BIGINT), 2: 1};
2022-07-20 08:14:59 jdbc[3]: 
/*SQL l:356 #:2*/select questions0_.questionnaire_id as question1_5_0_, questions0_.questions_id as question2_5_0_, question1_.id as id1_2_1_, question1_.question as question2_2_1_, question1_.true_answer as true_ans3_2_1_ from questionnaire_questions questions0_ inner join question question1_ on questions0_.questions_id=question1_.id where questions0_.questionnaire_id=? {1: CAST(3 AS BIGINT)};
2022-07-20 08:14:59 jdbc[3]: 
/*SQL l:144 #:2*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(30 AS BIGINT)};
2022-07-20 08:14:59 jdbc[3]: 
/*SQL l:144 #:3*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(31 AS BIGINT)};
2022-07-20 08:14:59 jdbc[3]: 
/*SQL l:129 #:1*/select questionna0_.id as id1_4_, questionna0_.title as title2_4_ from questionnaire questionna0_ where questionna0_.id=? limit ? {1: CAST(3 AS BIGINT), 2: 1};
2022-07-20 08:14:59 jdbc[3]: 
/*SQL l:356 #:2*/select questions0_.questionnaire_id as question1_5_0_, questions0_.questions_id as question2_5_0_, question1_.id as id1_2_1_, question1_.question as question2_2_1_, question1_.true_answer as true_ans3_2_1_ from questionnaire_questions questions0_ inner join question question1_ on questions0_.questions_id=question1_.id where questions0_.questionnaire_id=? {1: CAST(3 AS BIGINT)};
2022-07-20 08:14:59 jdbc[3]: 
/*SQL l:144 #:2*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(30 AS BIGINT)};
2022-07-20 08:14:59 jdbc[3]: 
/*SQL l:144 #:3*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(31 AS BIGINT)};
2022-07-20 08:14:59 jdbc[3]: 
/*SQL l:129 #:1*/select questionna0_.id as id1_4_, questionna0_.title as title2_4_ from questionnaire questionna0_ where questionna0_.id=? limit ? {1: CAST(3 AS BIGINT), 2: 1};
2022-07-20 08:14:59 jdbc[3]: 
/*SQL l:356 #:2*/select questions0_.questionnaire_id as question1_5_0_, questions0_.questions_id as question2_5_0_, question1_.id as id1_2_1_, question1_.question as question2_2_1_, question1_.true_answer as true_ans3_2_1_ from questionnaire_questions questions0_ inner join question question1_ on questions0_.questions_id=question1_.id where questions0_.questionnaire_id=? {1: CAST(3 AS BIGINT)};
2022-07-20 08:14:59 jdbc[3]: 
/*SQL l:144 #:2*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(30 AS BIGINT)};
2022-07-20 08:14:59 jdbc[3]: 
/*SQL l:144 #:3*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(31 AS BIGINT)};
2022-07-20 08:14:59 jdbc[3]: 
/*SQL l:129 #:1*/select questionna0_.id as id1_4_, questionna0_.title as title2_4_ from questionnaire questionna0_ where questionna0_.id=? limit ? {1: CAST(3 AS BIGINT), 2: 1};
2022-07-20 08:14:59 jdbc[3]: 
/*SQL l:356 #:2*/select questions0_.questionnaire_id as question1_5_0_, questions0_.questions_id as question2_5_0_, question1_.id as id1_2_1_, question1_.question as question2_2_1_, question1_.true_answer as true_ans3_2_1_ from questionnaire_questions questions0_ inner join question question1_ on questions0_.questions_id=question1_.id where questions0_.questionnaire_id=? {1: CAST(3 AS BIGINT)};
2022-07-20 08:14:59 jdbc[3]: 
/*SQL l:144 #:2*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(30 AS BIGINT)};
2022-07-20 08:14:59 jdbc[3]: 
/*SQL l:144 #:3*/select answers0_.question_id as question1_3_0_, answers0_.answers as answers2_3_0_ from question_answers answers0_ where answers0_.question_id=? {1: CAST(31 AS BIGINT)};
2022-07-20 08:15:39 database: closing C:/Users/User/IdeaProjects/Questionnaire/database from shutdown hook
2022-07-20 08:15:39 database: disconnecting session #3
2022-07-20 08:15:39 database: disconnected session #3
2022-07-20 08:15:39 database: disconnecting session #4
2022-07-20 08:15:39 database: disconnected session #4
2022-07-20 08:15:39 database: disconnecting session #5
2022-07-20 08:15:39 database: disconnected session #5
2022-07-20 08:15:39 database: disconnecting session #6
2022-07-20 08:15:39 database: disconnected session #6
2022-07-20 08:15:39 database: disconnecting session #7
2022-07-20 08:15:39 database: disconnected session #7
2022-07-20 08:15:39 database: disconnecting session #8
2022-07-20 08:15:39 database: disconnected session #8
2022-07-20 08:15:39 database: disconnecting session #9
2022-07-20 08:15:39 database: disconnected session #9
2022-07-20 08:15:39 database: disconnecting session #10
2022-07-20 08:15:39 database: disconnected session #10
2022-07-20 08:15:39 database: disconnecting session #11
2022-07-20 08:15:39 database: disconnected session #11
2022-07-20 08:15:39 database: disconnecting session #12
2022-07-20 08:15:39 database: disconnected session #12
2022-07-20 08:15:39 database: disconnecting session #16
2022-07-20 08:15:39 database: disconnected session #16
2022-07-20 08:15:39 database: closing C:/Users/User/IdeaProjects/Questionnaire/database
2022-07-20 08:15:39 lock: 1 exclusive requesting for SYS 
2022-07-20 08:15:39 lock: 1 exclusive added for SYS 
2022-07-20 08:15:39 lock: 1 exclusive unlock SYS 
2022-07-20 08:15:39 lock: 2 shared read unlock SYS 
2022-07-20 08:15:39 lock: 1 shared read unlock SYS 
2022-07-20 08:15:40 database: closed
2022-07-21 08:32:03 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "ANSWERS_ID" не найден
Column "ANSWERS_ID" not found; SQL statement:
alter table question_answers add constraint UK_4qtn1pf4ea4ougou3ewipk9qx unique (answers_id) [42122-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:749)
	at org.h2.table.IndexColumn.mapColumns(IndexColumn.java:184)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:181)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:72)
	at org.h2.command.ddl.AlterTable.update(AlterTable.java:46)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:252)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:252)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:54)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:581)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:526)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applyUniqueKeys(AbstractSchemaMigrator.java:401)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:90)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:220)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:123)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:196)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:85)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:335)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:471)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1498)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:58)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1306)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1295)
	at com.example.questionnaire.QuestionnaireApplication.main(QuestionnaireApplication.java:14)
2022-07-21 08:32:03 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "ANSWERS_ID" не найден
Column "ANSWERS_ID" not found; SQL statement:
alter table question_answers add constraint FK9c1mnvl9wblb8j4d29lwfu708 foreign key (answers_id) references answers [42122-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:749)
	at org.h2.table.IndexColumn.mapColumns(IndexColumn.java:184)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:214)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:72)
	at org.h2.command.ddl.AlterTable.update(AlterTable.java:46)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:252)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:252)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:54)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:581)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:526)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applyForeignKeys(AbstractSchemaMigrator.java:452)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:263)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:123)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:196)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:85)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:335)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:471)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1498)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:58)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1306)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1295)
	at com.example.questionnaire.QuestionnaireApplication.main(QuestionnaireApplication.java:14)
2022-07-21 08:32:26 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "ANSWERS0_.ANSWERS_ID" не найден
Column "ANSWERS0_.ANSWERS_ID" not found; SQL statement:
select answers0_.question_id as question1_5_0_, answers0_.answers_id as answers_2_5_0_, answers1_.id as id1_0_1_, answers1_.answer as answer2_0_1_ from question_answers answers0_ inner join answers answers1_ on answers0_.answers_id=answers1_.id where answers0_.question_id=? [42122-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:244)
	at org.h2.expression.ExpressionColumn.optimizeOther(ExpressionColumn.java:226)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:213)
	at org.h2.expression.Alias.optimize(Alias.java:52)
	at org.h2.command.query.Select.prepareExpressions(Select.java:1170)
	at org.h2.command.query.Query.prepare(Query.java:218)
	at org.h2.command.Parser.prepareCommand(Parser.java:575)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:92)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:288)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$5.doPrepare(StatementPreparerImpl.java:149)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareQueryStatement(StatementPreparerImpl.java:151)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.prepareQueryStatement(AbstractLoadPlanBasedLoader.java:198)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:162)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:705)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2208)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:595)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:591)
	at org.hibernate.collection.internal.AbstractPersistentCollection.forceInitialization(AbstractPersistentCollection.java:787)
	at org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:1001)
	at org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:987)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:362)
	at org.hibernate.loader.Loader.doList(Loader.java:2868)
	at org.hibernate.loader.Loader.doList(Loader.java:2850)
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2682)
	at org.hibernate.loader.Loader.list(Loader.java:2677)
	at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:540)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:400)
	at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:219)
	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1459)
	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1649)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1617)
	at org.hibernate.query.Query.getResultList(Query.java:165)
	at org.hibernate.query.criteria.internal.compile.CriteriaQueryTypeQueryAdapter.getResultList(CriteriaQueryTypeQueryAdapter.java:76)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:427)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:88)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy115.findAll(Unknown Source)
	at com.example.questionnaire.service.QuestionnaireService.allQuestionnaires(QuestionnaireService.java:39)
	at com.example.questionnaire.controller.QuestionnaireController.allQuestionnaires(QuestionnaireController.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-21 08:32:41 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "ANSWERS0_.ANSWERS_ID" не найден
Column "ANSWERS0_.ANSWERS_ID" not found; SQL statement:
select answers0_.question_id as question1_5_0_, answers0_.answers_id as answers_2_5_0_, answers1_.id as id1_0_1_, answers1_.answer as answer2_0_1_ from question_answers answers0_ inner join answers answers1_ on answers0_.answers_id=answers1_.id where answers0_.question_id=? [42122-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:244)
	at org.h2.expression.ExpressionColumn.optimizeOther(ExpressionColumn.java:226)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:213)
	at org.h2.expression.Alias.optimize(Alias.java:52)
	at org.h2.command.query.Select.prepareExpressions(Select.java:1170)
	at org.h2.command.query.Query.prepare(Query.java:218)
	at org.h2.command.Parser.prepareCommand(Parser.java:575)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:92)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:288)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$5.doPrepare(StatementPreparerImpl.java:149)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareQueryStatement(StatementPreparerImpl.java:151)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.prepareQueryStatement(AbstractLoadPlanBasedLoader.java:198)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:162)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:705)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2208)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:595)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:591)
	at org.hibernate.collection.internal.AbstractPersistentCollection.forceInitialization(AbstractPersistentCollection.java:787)
	at org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:1001)
	at org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:987)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:362)
	at org.hibernate.loader.Loader.doList(Loader.java:2868)
	at org.hibernate.loader.Loader.doList(Loader.java:2850)
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2682)
	at org.hibernate.loader.Loader.list(Loader.java:2677)
	at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:540)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:400)
	at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:219)
	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1459)
	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1649)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1617)
	at org.hibernate.query.Query.getResultList(Query.java:165)
	at org.hibernate.query.criteria.internal.compile.CriteriaQueryTypeQueryAdapter.getResultList(CriteriaQueryTypeQueryAdapter.java:76)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:468)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:88)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy111.findAll(Unknown Source)
	at com.example.questionnaire.service.CustomerService.readCustomer(CustomerService.java:34)
	at com.example.questionnaire.controller.CustomerController.getCustomers(CustomerController.java:26)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-21 08:35:08 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "ANSWERS_ID" не найден
Column "ANSWERS_ID" not found; SQL statement:
alter table question_answers add constraint UK_4qtn1pf4ea4ougou3ewipk9qx unique (answers_id) [42122-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:749)
	at org.h2.table.IndexColumn.mapColumns(IndexColumn.java:184)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:181)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:72)
	at org.h2.command.ddl.AlterTable.update(AlterTable.java:46)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:252)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:252)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:54)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:581)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:526)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applyUniqueKeys(AbstractSchemaMigrator.java:401)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:90)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:220)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:123)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:196)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:85)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:335)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:471)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1498)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:58)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1306)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1295)
	at com.example.questionnaire.QuestionnaireApplication.main(QuestionnaireApplication.java:14)
2022-07-21 08:35:08 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "ANSWERS_ID" не найден
Column "ANSWERS_ID" not found; SQL statement:
alter table question_answers add constraint FK9c1mnvl9wblb8j4d29lwfu708 foreign key (answers_id) references answers [42122-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:749)
	at org.h2.table.IndexColumn.mapColumns(IndexColumn.java:184)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:214)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:72)
	at org.h2.command.ddl.AlterTable.update(AlterTable.java:46)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:252)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:252)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:54)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:581)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:526)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applyForeignKeys(AbstractSchemaMigrator.java:452)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:263)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:123)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:196)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:85)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:335)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:471)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1498)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:58)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1306)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1295)
	at com.example.questionnaire.QuestionnaireApplication.main(QuestionnaireApplication.java:14)
2022-07-21 08:36:25 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "ANSWERS0_.ANSWERS_ID" не найден
Column "ANSWERS0_.ANSWERS_ID" not found; SQL statement:
select answers0_.question_id as question1_5_0_, answers0_.answers_id as answers_2_5_0_, answers1_.id as id1_0_1_, answers1_.answer as answer2_0_1_ from question_answers answers0_ inner join answers answers1_ on answers0_.answers_id=answers1_.id where answers0_.question_id=? [42122-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:244)
	at org.h2.expression.ExpressionColumn.optimizeOther(ExpressionColumn.java:226)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:213)
	at org.h2.expression.Alias.optimize(Alias.java:52)
	at org.h2.command.query.Select.prepareExpressions(Select.java:1170)
	at org.h2.command.query.Query.prepare(Query.java:218)
	at org.h2.command.Parser.prepareCommand(Parser.java:575)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:92)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:288)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$5.doPrepare(StatementPreparerImpl.java:149)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareQueryStatement(StatementPreparerImpl.java:151)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.prepareQueryStatement(AbstractLoadPlanBasedLoader.java:198)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:162)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:705)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2208)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:595)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:591)
	at org.hibernate.collection.internal.AbstractPersistentCollection.forceInitialization(AbstractPersistentCollection.java:787)
	at org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:1001)
	at org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:987)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:362)
	at org.hibernate.loader.Loader.doList(Loader.java:2868)
	at org.hibernate.loader.Loader.doList(Loader.java:2850)
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2682)
	at org.hibernate.loader.Loader.list(Loader.java:2677)
	at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:540)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:400)
	at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:219)
	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1459)
	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1649)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1617)
	at org.hibernate.query.Query.getResultList(Query.java:165)
	at org.hibernate.query.criteria.internal.compile.CriteriaQueryTypeQueryAdapter.getResultList(CriteriaQueryTypeQueryAdapter.java:76)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:468)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:88)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy111.findAll(Unknown Source)
	at com.example.questionnaire.service.CustomerService.readCustomer(CustomerService.java:34)
	at com.example.questionnaire.controller.CustomerController.getCustomers(CustomerController.java:26)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-21 08:39:14 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "ANSWERS5_.ANSWERS_ID" не найден
Column "ANSWERS5_.ANSWERS_ID" not found; SQL statement:
select customer0_.id as id1_1_0_, customer0_.created_date as created_2_1_0_, customer0_.email as email3_1_0_, customer0_.name as name4_1_0_, customer0_.points as points5_1_0_, customer0_.role as role6_1_0_, questionna1_.customer_id as customer1_2_1_, questionna2_.id as question2_2_1_, questionna2_.id as id1_6_2_, questionna2_.title as title2_6_2_, questions3_.questionnaire_id as question1_7_3_, question4_.id as question2_7_3_, question4_.id as id1_4_4_, question4_.question as question2_4_4_, question4_.true_answer as true_ans3_4_4_, answers5_.question_id as question1_5_5_, answers6_.id as answers_2_5_5_, answers6_.id as id1_0_6_, answers6_.answer as answer2_0_6_ from customer customer0_ left outer join customer_questionnaires questionna1_ on customer0_.id=questionna1_.customer_id left outer join questionnaire questionna2_ on questionna1_.questionnaires_id=questionna2_.id left outer join questionnaire_questions questions3_ on questionna2_.id=questions3_.questionnaire_id left outer join question question4_ on questions3_.questions_id=question4_.id left outer join question_answers answers5_ on question4_.id=answers5_.question_id left outer join answers answers6_ on answers5_.answers_id=answers6_.id where customer0_.id=? [42122-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:244)
	at org.h2.expression.ExpressionColumn.optimizeOther(ExpressionColumn.java:226)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:213)
	at org.h2.expression.condition.Comparison.optimize(Comparison.java:139)
	at org.h2.expression.Expression.optimizeCondition(Expression.java:148)
	at org.h2.table.TableFilter.createIndexConditions(TableFilter.java:635)
	at org.h2.table.TableFilter.createIndexConditions(TableFilter.java:644)
	at org.h2.table.TableFilter.createIndexConditions(TableFilter.java:644)
	at org.h2.table.TableFilter.createIndexConditions(TableFilter.java:644)
	at org.h2.table.TableFilter.createIndexConditions(TableFilter.java:644)
	at org.h2.table.TableFilter.createIndexConditions(TableFilter.java:644)
	at org.h2.table.TableFilter.createIndexConditions(TableFilter.java:644)
	at org.h2.command.query.Select.preparePlan(Select.java:1320)
	at org.h2.command.query.Select.preparePlan(Select.java:1202)
	at org.h2.command.query.Query.prepare(Query.java:219)
	at org.h2.command.Parser.prepareCommand(Parser.java:575)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:92)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:288)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$5.doPrepare(StatementPreparerImpl.java:149)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareQueryStatement(StatementPreparerImpl.java:151)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.prepareQueryStatement(AbstractLoadPlanBasedLoader.java:198)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:162)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader.load(AbstractLoadPlanBasedEntityLoader.java:285)
	at org.hibernate.persister.entity.AbstractEntityPersister.doLoad(AbstractEntityPersister.java:4521)
	at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:4511)
	at org.hibernate.event.internal.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:571)
	at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:539)
	at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:208)
	at org.hibernate.event.internal.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:327)
	at org.hibernate.event.internal.DefaultLoadEventListener.doOnLoad(DefaultLoadEventListener.java:108)
	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:74)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:118)
	at org.hibernate.internal.SessionImpl.fireLoadNoChecks(SessionImpl.java:1231)
	at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1220)
	at org.hibernate.internal.SessionImpl.access$2100(SessionImpl.java:202)
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.doLoad(SessionImpl.java:2835)
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.lambda$load$1(SessionImpl.java:2812)
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.perform(SessionImpl.java:2768)
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.load(SessionImpl.java:2812)
	at org.hibernate.internal.SessionImpl.find(SessionImpl.java:3400)
	at org.hibernate.internal.SessionImpl.find(SessionImpl.java:3367)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy107.find(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy2/jdk.proxy2.$Proxy107.find(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findById(SimpleJpaRepository.java:335)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.deleteById(SimpleJpaRepository.java:172)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:530)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:286)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:640)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:81)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy111.deleteById(Unknown Source)
	at com.example.questionnaire.service.CustomerService.deleteCustomer(CustomerService.java:52)
	at com.example.questionnaire.controller.CustomerController.deleteCustomer(CustomerController.java:51)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:931)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-21 09:08:35 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:286)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$1.doPrepare(StatementPreparerImpl.java:90)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareStatement(StatementPreparerImpl.java:81)
	at org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.buildBatchStatement(AbstractBatchImpl.java:142)
	at org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl.getBatchStatement(AbstractBatchImpl.java:131)
	at org.hibernate.persister.collection.AbstractCollectionPersister.remove(AbstractCollectionPersister.java:1227)
	at org.hibernate.action.internal.CollectionRemoveAction.execute(CollectionRemoveAction.java:99)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)
	at org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:721)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1407)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:489)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3290)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2425)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy116.deleteById(Unknown Source)
	at com.example.questionnaire.service.QuestionnaireService.deleteQuestionnaire(QuestionnaireService.java:47)
	at com.example.questionnaire.controller.QuestionnaireController.deleteQuestionnaire(QuestionnaireController.java:48)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:931)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-21 09:08:35 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.rollback(JdbcConnection.java:463)
	at com.zaxxer.hikari.pool.ProxyConnection.rollback(ProxyConnection.java:396)
	at com.zaxxer.hikari.pool.HikariProxyConnection.rollback(HikariProxyConnection.java)
	at org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor.rollback(AbstractLogicalConnectionImplementor.java:121)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.rollback(JdbcResourceLocalTransactionCoordinatorImpl.java:304)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:290)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at jdk.proxy2/jdk.proxy2.$Proxy116.deleteById(Unknown Source)
	at com.example.questionnaire.service.QuestionnaireService.deleteQuestionnaire(QuestionnaireService.java:47)
	at com.example.questionnaire.controller.QuestionnaireController.deleteQuestionnaire(QuestionnaireController.java:48)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:931)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-21 09:08:35 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.getWarnings(JdbcConnection.java:596)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:290)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:931)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-21 09:08:35 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:610)
	at com.zaxxer.hikari.pool.HikariProxyConnection.clearWarnings(HikariProxyConnection.java)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.handleAndClearWarnings(SqlExceptionHelper.java:299)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logAndClearWarnings(SqlExceptionHelper.java:269)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:215)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:931)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2022-07-21 09:08:35 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: База данных уже закрыта (чтобы отключить автоматическое закрытие базы данных при останове JVM, добавьте ";DB_CLOSE_ON_EXIT=FALSE" в URL)
Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:678)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1375)
	at org.h2.jdbc.JdbcConnection.setAutoCommit(JdbcConnection.java:402)
	at com.zaxxer.hikari.pool.PoolBase.resetConnectionState(PoolBase.java:219)
	at com.zaxxer.hikari.pool.PoolEntry.resetConnectionState(PoolEntry.java:107)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:263)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.releaseConnection(NonContextualJdbcConnectionAccess.java:49)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.releaseConnection(LogicalConnectionManagedImpl.java:219)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:261)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175)
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:374)
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:413)
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:398)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.close(Unknown Source)
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor.afterCompletion(OpenEntityManagerInViewInterceptor.java:112)
	at org.springframework.web.servlet.handler.WebRequestHandlerInterceptorAdapter.afterCompletion(WebRequestHandlerInterceptorAdapter.java:73)
	at org.springframework.web.servlet.HandlerExecutionChain.triggerAfterCompletion(HandlerExecutionChain.java:178)
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletion(DispatcherServlet.java:1455)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1087)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:931)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
